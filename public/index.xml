<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>0xcf9</title>
    <link>https://example.org/</link>
    <description>Recent content on 0xcf9</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Oct 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Intro to Keyrings</title>
      <link>https://example.org/posts/10-keyrings-2023/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://example.org/posts/10-keyrings-2023/</guid>
      <description>This is the third part of the series on securing applications on Linux. The first part was about Linux Seccompand the second part was about Linux Landlock. This third part is about Linux Keyrings.&#xA;What are Linux Keyrings? As usual we start citing the appropriate man page, keyrings(7):&#xA;The Linux key-management facility is primarily a way for various kernel components to retain or cache security data, authentication keys, encryption keys, and other data in the kernel System call interfaces are provided so that user-space programs can manage those objects and also use the facility for their own purposes; see add_key(2), request_key(2), and keyctl(2).</description>
    </item>
    <item>
      <title>Intro to Landlock</title>
      <link>https://example.org/posts/11-landlock-2023/</link>
      <pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://example.org/posts/11-landlock-2023/</guid>
      <description>In a previous article we shown up how it is possible to make our applications more secure through the use of seccomp which allows us to restrict the syscalls that a process or a thread can invoke. In this article we will see how to use Landlock LSM to further improve the security of our applications.&#xA;Introduction: What&amp;rsquo;s Landlock? Landlock is a Linux security module that allows to restrict the access to the filesystem.</description>
    </item>
    <item>
      <title>Intro to Seccomp</title>
      <link>https://example.org/posts/12-seccomp-2023/</link>
      <pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://example.org/posts/12-seccomp-2023/</guid>
      <description>Whenever we run a program on our machine, it runs with the same privileges as the user that started it. This is a problem, because it means that if we run a program that has a bug in it, if exploited, that bug can be used to compromise the whole machine. This is why it is important to run programs with the least amount of privileges possible.&#xA;One way to do this is to use a sandbox.</description>
    </item>
    <item>
      <title>Books list 2022</title>
      <link>https://example.org/posts/09-books-2022/</link>
      <pubDate>Sat, 31 Dec 2022 17:46:40 +0200</pubDate>
      <guid>https://example.org/posts/09-books-2022/</guid>
      <description>Another year, another list of books.&#xA;Rust for Rustaceans Practical IoT Hacking Rock Guitar Tapping Technique Linux Kernel Debugging The Legendary Guitar of Jason Becker Marty Friedman: Exotic Metal Guitar Il Richiamo di Cthulhu (Gou Tanabe – Graphic Novel) Le Montagne della Follia (Gou Tanabe – Graphic Novel) </description>
    </item>
    <item>
      <title>Writing a simple Traceroute in Go</title>
      <link>https://example.org/posts/13-traceroute-2022/</link>
      <pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://example.org/posts/13-traceroute-2022/</guid>
      <description>If your question is why, the answer is quite simple: why not? And by the way, my favorite question is: how?&#xA;So, how does a traceroute program works in general? (In this post we&amp;rsquo;re considering traceroute in IPv4 networks)&#xA;Well, basically traceroute exploits a very simple concept. It sends IPv4 packets starting with TTL = 1 to a remote host, continues incrementing it and expects back ICMPv4 TimeExceeded packets from intermediary hosts or an ICMPv4 EchoReply from the destination one.</description>
    </item>
    <item>
      <title>Build a simple fuzzer with libFuzzer</title>
      <link>https://example.org/posts/02-libfuzzer/</link>
      <pubDate>Thu, 17 Feb 2022 14:55:03 +0200</pubDate>
      <guid>https://example.org/posts/02-libfuzzer/</guid>
      <description>libFuzzer is coverage-guided, evolutionary fuzzing engine. And it’s a wonderful tool to help with bug hunting.&#xA;To quote the libFuzzer page:&#xA;LibFuzzer is linked with the library under test, and feeds fuzzed inputs to the library via a specific fuzzing entrypoint (aka “target function”); the fuzzer then tracks which areas of the code are reached, and generates mutations on the corpus of input data in order to maximize the code coverage.</description>
    </item>
    <item>
      <title>Quick Linux Kernel debug with QEMU, GDB and U-ROOT</title>
      <link>https://example.org/posts/03-linux-kernel-debug/</link>
      <pubDate>Mon, 14 Feb 2022 17:07:01 +0200</pubDate>
      <guid>https://example.org/posts/03-linux-kernel-debug/</guid>
      <description>When I want to harness with the Kernel, e.g., to play with some module I wrote, or just maybe learning something new about its internals I usually relay on some quick tricks to bring up a small environment to play with.&#xA;The first thing is I do is reusing the host kernel of my favorite distro: Fedora (unless some upstream feature I want to play with is not there and in that case I grab directly the sources from kernel.</description>
    </item>
    <item>
      <title>DLL Injection using Go</title>
      <link>https://example.org/posts/04-go-dll-inject/</link>
      <pubDate>Wed, 19 Jan 2022 17:11:33 +0200</pubDate>
      <guid>https://example.org/posts/04-go-dll-inject/</guid>
      <description>DLL injection is the act of loading a library into a running process. Purposes can be multiple ones, like hijacking or instrumenting code, extending or adding functionalities of a software without recompiling it or malicious intents like hiding malware components.&#xA;In the first part of the post we will deal with the injection itself, while in the second one we’ll build a DLL in Go emphasizing some of the limitations and try to overcome them.</description>
    </item>
    <item>
      <title>Books I&#39;ve read in 2021</title>
      <link>https://example.org/posts/08-books-2021-2/</link>
      <pubDate>Wed, 22 Dec 2021 17:44:33 +0200</pubDate>
      <guid>https://example.org/posts/08-books-2021-2/</guid>
      <description>Here’s the list of books I’ve enjoyed during 2021. Since I’m an avid reader (more than probably I like to write), I’ll try to write down a note about books I liked every year.&#xA;Linux Kernel Programming Vol 1 and Vol 2 – I try always to keep up to date with Linux Kernel development, reading all the stuff that gets published around the topic Windows 10 System Programming Vol 1 and Vol 2 – One of the best book I’ve ever read about system programming, I’m not a Windows guy (except for music production stuff, but since I like low level stuff and system programming, why not?</description>
    </item>
    <item>
      <title>Nastry Tricks with Go Generate</title>
      <link>https://example.org/posts/06-nastry-tricks-go-generate/</link>
      <pubDate>Wed, 24 Nov 2021 17:29:14 +0200</pubDate>
      <guid>https://example.org/posts/06-nastry-tricks-go-generate/</guid>
      <description>Nasty tricks with go generate novembre 24th, 2021&#xA;What follows here is just a general idea of how and individual with malicious intent can theoretically attack a CI system or a build machine using the go generate tool.&#xA;The idea is very simple, first the attacker should embed a go generate directive into its application, then at build time (using make or cmake or whatever it’s used to run the build) should run the go generate command.</description>
    </item>
    <item>
      <title>Embed and execute from memory with Golang</title>
      <link>https://example.org/posts/01-go-embed/</link>
      <pubDate>Tue, 22 Jun 2021 14:33:57 +0200</pubDate>
      <guid>https://example.org/posts/01-go-embed/</guid>
      <description>In this post I’ll show how to embed a file into a Golang binary and then how this file will be loaded and executed from memory on Linux with the aid of memfd_create(2) and execveat(2).&#xA;Since version 1.16 Golang introduced a nice feature which allows embedding a file or a hierarchy of files into a binary. The embedded content can then be accessed as a string, []byte slice or embed.FS object.</description>
    </item>
    <item>
      <title>Books I’ve enjoyed between a lockdown and a red zone</title>
      <link>https://example.org/posts/07-books-2021/</link>
      <pubDate>Sun, 03 Jan 2021 17:31:22 +0200</pubDate>
      <guid>https://example.org/posts/07-books-2021/</guid>
      <description>2020 for sure has been an unconventional year. Humanity has been hit by a catastrophe and people habits have changed a lot. Spending most time at home for some has been uncomfortable, for others like me, working in IT, not that much has been changed to be honest. Despite difficulties to see friends and hang for a beer or being distant from family, it’s not that I spend too much time distant from my laptop or guitars.</description>
    </item>
    <item>
      <title>Having fun and really no profit with $ORIGIN expansion variable in Java</title>
      <link>https://example.org/posts/05-elf-origin-expansion/</link>
      <pubDate>Mon, 30 Jan 2017 17:22:16 +0200</pubDate>
      <guid>https://example.org/posts/05-elf-origin-expansion/</guid>
      <description>Having fun and really no profit with $ORIGIN expansion variable in Java gennaio 30th, 2017&#xA;Days ago I was reading this [0] interesting article about the dynamic linker expansion variables, and so I tought it would be fun to search for binaries with the RPATH dynamic tag containing the $ORIGIN variable.&#xA;So digging through dynamic tags using eu-readelf -d I found that the java ELF binary has the following RPATH:</description>
    </item>
  </channel>
</rss>
